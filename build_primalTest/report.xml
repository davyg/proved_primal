<?xml version = "1.0" encoding="UTF-8" ?>
<?xml-stylesheet href="report.css" type="text/css" ?>
<report>
    <name>primalTest</name>
    <hierarchy>
        <node name='update_x_ensures_l122' ignore='0' class='Lemma' file='lem_update_x_ensures_l122'>
            <dep name='update_x_ensures_l1221' />
            <dep name='update_x_ensures_l1222' />
        </node>
        <node name='set_nc' ignore='0' class='Function' file='fun_set_nc'>
        </node>
        <node name='update_x' ignore='0' class='Function' file='fun_update_x'>
            <dep name='theorem_4_1_14_apply' />
            <dep name='update_x_ensures' />
        </node>
        <node name='set_pathfollowing_X' ignore='0' class='Function' file='fun_set_pathfollowing_X'>
            <dep name='mat_eq_def_2_1' />
        </node>
        <node name='omega_beta_gamma' ignore='1' class='Lemma' file='lem_omega_beta_gamma'>
        </node>
        <node name='norm_pre_pos' ignore='1' class='Lemma' file='lem_norm_pre_pos'>
        </node>
        <node name='mat_eq_def' ignore='0' class='Axiom' file='null'>
        </node>
        <node name='update_x_ensures_l11' ignore='0' class='Lemma' file='lem_update_x_ensures_l11'>
            <dep name='omega_beta_gamma' />
        </node>
        <node name='norm_pos' ignore='1' class='Lemma' file='lem_norm_pos'>
        </node>
        <node name='set_cholesky_PF2_b1_sub_1' ignore='0' class='Function' file='fun_set_cholesky_PF2_b1_sub_1'>
        </node>
        <node name='mult_inner_neg' ignore='1' class='Lemma' file='lem_mult_inner_neg'>
        </node>
        <node name='update_x_ensures_l12' ignore='0' class='Lemma' file='lem_update_x_ensures_l12'>
            <dep name='update_x_ensures_l121' />
            <dep name='update_x_ensures_l122' />
        </node>
        <node name='norm_sep' ignore='1' class='Lemma' file='lem_norm_sep'>
        </node>
        <node name='update_x_ensures_l1' ignore='0' class='Lemma' file='lem_update_x_ensures_l1'>
            <dep name='update_x_ensures_l11' />
            <dep name='update_x_ensures_l12' />
        </node>
        <node name='norm_scal' ignore='1' class='Lemma' file='lem_norm_scal'>
        </node>
        <node name='mult_idR' ignore='1' class='Lemma' file='lem_mult_idR'>
        </node>
        <node name='mult_inner_pos' ignore='1' class='Lemma' file='lem_mult_inner_pos'>
        </node>
        <node name='optimality' ignore='1' class='Lemma' file='lem_optimality'>
        </node>
        <node name='compute_dx' ignore='0' class='Function' file='fun_compute_dx'>
            <dep name='Amult' />
            <dep name='mult_idL' />
        </node>
        <node name='compute_pre' ignore='1' class='Function' file='fun_compute_pre'>
        </node>
        <node name='update_x_ensures' ignore='0' class='Lemma' file='lem_update_x_ensures'>
            <dep name='update_x_ensures_l1' />
        </node>
        <node name='set_compute_pre_grad_sub_0' ignore='0' class='Function' file='fun_set_compute_pre_grad_sub_0'>
        </node>
        <node name='theorem_4_1_14' ignore='0' class='Axiom' file='null'>
        </node>
        <node name='lemma_4_2_1' ignore='1' class='Lemma' file='lem_lemma_4_2_1'>
        </node>
        <node name='mult_idL' ignore='1' class='Lemma' file='lem_mult_idL'>
        </node>
        <node name='theorem_4_1_14_apply' ignore='0' class='Lemma' file='lem_theorem_4_1_14_apply'>
            <dep name='theorem_4_1_14' />
        </node>
        <node name='mat_eq_def_1_1' ignore='0' class='Lemma' file='lem_mat_eq_def_1_1'>
            <dep name='mat_eq_def' />
        </node>
        <node name='update_t_ensures1_l331' ignore='0' class='Lemma' file='lem_update_t_ensures1_l331'>
        </node>
        <node name='mat_scal_dev' ignore='1' class='Lemma' file='lem_mat_scal_dev'>
        </node>
        <node name='update_t_ensures1_l33' ignore='0' class='Lemma' file='lem_update_t_ensures1_l33'>
            <dep name='norm_sep' />
            <dep name='update_t_ensures1_l331' />
        </node>
        <node name='update_x_ensures_l1221' ignore='0' class='Lemma' file='lem_update_x_ensures_l1221'>
        </node>
        <node name='Amat_scal' ignore='1' class='Lemma' file='lem_Amat_scal'>
        </node>
        <node name='cholesky_PF2' ignore='1' class='cholesky' file='fun_cholesky_PF2'>
        </node>
        <node name='omega_inc' ignore='1' class='Lemma' file='lem_omega_inc'>
        </node>
        <node name='update_t_ensures1_l321' ignore='0' class='Lemma' file='lem_update_t_ensures1_l321'>
            <dep name='Amat_scal' />
        </node>
        <node name='Amult' ignore='1' class='Lemma' file='lem_Amult'>
            <dep name='mat_eq_def' />
            <dep name='mult_inner_pos' />
            <dep name='mult_inner_neg' />
        </node>
        <node name='update_t' ignore='0' class='Function' file='fun_update_t'>
            <dep name='lemma_4_2_1' />
            <dep name='update_t_ensures1' />
            <dep name='update_t_ensures2' />
        </node>
        <node name='set_compute_pre_vals' ignore='0' class='Function' file='fun_set_compute_pre_vals'>
            <dep name='mat_eq_def_5_1' />
        </node>
        <node name='set_compute_pre_grad_sub_1' ignore='0' class='Function' file='fun_set_compute_pre_grad_sub_1'>
        </node>
        <node name='update_t_ensures1_l32' ignore='0' class='Lemma' file='lem_update_t_ensures1_l32'>
            <dep name='norm_scal' />
        </node>
        <node name='update_x_ensures_l1222' ignore='0' class='Lemma' file='lem_update_x_ensures_l1222'>
            <dep name='omega_inc' />
            <dep name='bet_gam_inf1' />
            <dep name='norm_pos' />
        </node>
        <node name='Aadd' ignore='1' class='Lemma' file='lem_Aadd'>
        </node>
        <node name='set_compute_pre_hess_sub_0' ignore='0' class='Function' file='fun_set_compute_pre_hess_sub_0'>
        </node>
        <node name='set_pathfollowing_X_sub_0' ignore='0' class='Function' file='fun_set_pathfollowing_X_sub_0'>
        </node>
        <node name='update_t_ensures1_l31' ignore='0' class='Lemma' file='lem_update_t_ensures1_l31'>
        </node>
        <node name='bet_gam_inf1' ignore='0' class='Lemma' file='lem_bet_gam_inf1'>
        </node>
        <node name='mat_eq_def_2_2' ignore='0' class='Lemma' file='lem_mat_eq_def_2_2'>
            <dep name='mat_eq_def' />
        </node>
        <node name='update_t_ensures1_l3' ignore='0' class='Lemma' file='lem_update_t_ensures1_l3'>
            <dep name='update_t_ensures1_l31' />
            <dep name='update_t_ensures1_l32' />
            <dep name='update_t_ensures1_l33' />
        </node>
        <node name='mat_eq_def_5_1' ignore='0' class='Lemma' file='lem_mat_eq_def_5_1'>
            <dep name='mat_eq_def' />
        </node>
        <node name='set_compute_pre_hess' ignore='0' class='Function' file='fun_set_compute_pre_hess'>
            <dep name='mat_eq_def_2_2' />
        </node>
        <node name='update_x_ensures_l121' ignore='0' class='Lemma' file='lem_update_x_ensures_l121'>
            <dep name='theorem_4_1_14_apply' />
        </node>
        <node name='update_t_ensures1_l2' ignore='0' class='Lemma' file='lem_update_t_ensures1_l2'>
        </node>
        <node name='set_pathfollowing_dx' ignore='0' class='Function' file='fun_set_pathfollowing_dx'>
            <dep name='mat_eq_def_2_1' />
        </node>
        <node name='set_compute_pre_hess_sub_1' ignore='0' class='Function' file='fun_set_compute_pre_hess_sub_1'>
        </node>
        <node name='norm_tri' ignore='1' class='Lemma' file='lem_norm_tri'>
        </node>
        <node name='set_pathfollowing_X_sub_1' ignore='0' class='Function' file='fun_set_pathfollowing_X_sub_1'>
        </node>
        <node name='set_cholesky_PF2_b_sub_1' ignore='0' class='Function' file='fun_set_cholesky_PF2_b_sub_1'>
        </node>
        <node name='set_pathfollowing_X1_sub_0' ignore='0' class='Function' file='fun_set_pathfollowing_X1_sub_0'>
        </node>
        <node name='update_t_ensures1_l11' ignore='0' class='Lemma' file='lem_update_t_ensures1_l11'>
            <dep name='mat_scal_dev' />
            <dep name='Aadd' />
        </node>
        <node name='set_cholesky_PF2_b1' ignore='0' class='Function' file='fun_set_cholesky_PF2_b1'>
            <dep name='mat_eq_def_2_1' />
        </node>
        <node name='set_compute_pre_vals_sub_3' ignore='0' class='Function' file='fun_set_compute_pre_vals_sub_3'>
        </node>
        <node name='set_pathfollowing_dx_sub_0' ignore='0' class='Function' file='fun_set_pathfollowing_dx_sub_0'>
        </node>
        <node name='set_compute_dt_pre_nc' ignore='0' class='Function' file='fun_set_compute_dt_pre_nc'>
            <dep name='mat_eq_def_1_1' />
        </node>
        <node name='update_t_ensures1_l12' ignore='0' class='Lemma' file='lem_update_t_ensures1_l12'>
            <dep name='norm_tri' />
        </node>
        <node name='set_cholesky_PF2_A_sub_0' ignore='0' class='Function' file='fun_set_cholesky_PF2_A_sub_0'>
        </node>
        <node name='update_t_ensures1_l1' ignore='1' class='Lemma' file='lem_update_t_ensures1_l1'>
            <dep name='update_t_ensures1_l11' />
            <dep name='update_t_ensures1_l12' />
        </node>
        <node name='set_compute_pre_hess_sub_2' ignore='0' class='Function' file='fun_set_compute_pre_hess_sub_2'>
        </node>
        <node name='set_cholesky_PF2_A1_sub_1' ignore='0' class='Function' file='fun_set_cholesky_PF2_A1_sub_1'>
        </node>
        <node name='set_pathfollowing_X1_sub_1' ignore='0' class='Function' file='fun_set_pathfollowing_X1_sub_1'>
        </node>
        <node name='PF2_LOWER_POS' ignore='0' class='Lemma' file='lem_PF2_LOWER_POS'>
        </node>
        <node name='update_t_ensures1_l0' ignore='0' class='Lemma' file='lem_update_t_ensures1_l0'>
            <dep name='update_t_ensures1_l1' />
            <dep name='update_t_ensures1_l2' />
            <dep name='update_t_ensures1_l3' />
        </node>
        <node name='set_compute_pre_vals_sub_4' ignore='0' class='Function' file='fun_set_compute_pre_vals_sub_4'>
        </node>
        <node name='PF2_LOWER_ONE' ignore='0' class='Lemma' file='lem_PF2_LOWER_ONE'>
        </node>
        <node name='set_pathfollowing_dx_sub_1' ignore='0' class='Function' file='fun_set_pathfollowing_dx_sub_1'>
        </node>
        <node name='update_t_ensures1' ignore='0' class='Lemma' file='lem_update_t_ensures1'>
            <dep name='update_t_ensures1_l0' />
        </node>
        <node name='compute' ignore='0' class='Function' file='fun_compute'>
            <dep name='PF2_analytic_center' />
        </node>
        <node name='PF2_myoptimality' ignore='1' class='Lemma' file='lem_PF2_myoptimality'>
        </node>
        <node name='set_cholesky_PF2_A_sub_1' ignore='0' class='Function' file='fun_set_cholesky_PF2_A_sub_1'>
        </node>
        <node name='set_pathfollowing_X1' ignore='0' class='Function' file='fun_set_pathfollowing_X1'>
            <dep name='mat_eq_def_2_1' />
        </node>
        <node name='set_compute_pre_hess_sub_3' ignore='0' class='Function' file='fun_set_compute_pre_hess_sub_3'>
        </node>
        <node name='update_t_ensures2' ignore='1' class='Lemma' file='lem_update_t_ensures2'>
        </node>
        <node name='PF2_pathfollowing_ensures2' ignore='1' class='Lemma' file='lem_PF2_pathfollowing_ensures2'>
        </node>
        <node name='set_compute_pre_vals_sub_0' ignore='0' class='Function' file='fun_set_compute_pre_vals_sub_0'>
        </node>
        <node name='set_cholesky_PF2_A1_sub_2' ignore='0' class='Function' file='fun_set_cholesky_PF2_A1_sub_2'>
        </node>
        <node name='PF2_pathfollowing_invariant4' ignore='0' class='Lemma' file='lem_PF2_pathfollowing_invariant4'>
        </node>
        <node name='compute_dt' ignore='0' class='Function' file='fun_compute_dt'>
            <dep name='mat_eq_def_2_1' />
            <dep name='mat_eq_def_2_2' />
            <dep name='norm_pre_pos' />
            <dep name='norm_pos' />
            <dep name='norm_sep' />
            <dep name='Amult' />
            <dep name='mult_idL' />
        </node>
        <node name='set_cholesky_PF2_A' ignore='0' class='Function' file='fun_set_cholesky_PF2_A'>
            <dep name='mat_eq_def_2_2' />
        </node>
        <node name='set_compute_dt_pre_nc_sub_0' ignore='0' class='Function' file='fun_set_compute_dt_pre_nc_sub_0'>
        </node>
        <node name='PF2_acc_gt' ignore='1' class='Lemma' file='lem_PF2_acc_gt'>
        </node>
        <node name='PF2_pathfollowing_pre_update' ignore='1' class='Lemma' file='lem_PF2_pathfollowing_pre_update'>
        </node>
        <node name='set_cholesky_PF2_A_sub_2' ignore='0' class='Function' file='fun_set_cholesky_PF2_A_sub_2'>
        </node>
        <node name='set_cholesky_PF2_b_sub_0' ignore='0' class='Function' file='fun_set_cholesky_PF2_b_sub_0'>
        </node>
        <node name='set_cholesky_PF2_b1_sub_0' ignore='0' class='Function' file='fun_set_cholesky_PF2_b1_sub_0'>
        </node>
        <node name='set_compute_pre_vals_sub_1' ignore='0' class='Function' file='fun_set_compute_pre_vals_sub_1'>
        </node>
        <node name='set_cholesky_PF2_A1_sub_0' ignore='0' class='Function' file='fun_set_cholesky_PF2_A1_sub_0'>
        </node>
        <node name='set_cholesky_PF2_A1_sub_3' ignore='0' class='Function' file='fun_set_cholesky_PF2_A1_sub_3'>
        </node>
        <node name='mat_eq_def_2_1' ignore='0' class='Lemma' file='lem_mat_eq_def_2_1'>
            <dep name='mat_eq_def' />
        </node>
        <node name='PF2_analytic_center' ignore='0' class='Axiom' file='null'>
        </node>
        <node name='PF2_ncca' ignore='1' class='Lemma' file='lem_PF2_ncca'>
        </node>
        <node name='set_compute_pre_grad' ignore='0' class='Function' file='fun_set_compute_pre_grad'>
            <dep name='mat_eq_def_2_1' />
        </node>
        <node name='pathfollowing' ignore='1' class='Function' file='fun_pathfollowing'>
            <dep name='PF2_LOWER_ONE' />
            <dep name='PF2_LOWER_POS' />
            <dep name='PF2_myoptimality' />
            <dep name='PF2_ncca' />
            <dep name='PF2_acc_gt' />
            <dep name='PF2_pathfollowing_ensures2' />
            <dep name='PF2_pathfollowing_invariant4' />
            <dep name='PF2_pathfollowing_pre_update' />
        </node>
        <node name='set_cholesky_PF2_A_sub_3' ignore='0' class='Function' file='fun_set_cholesky_PF2_A_sub_3'>
        </node>
        <node name='set_compute_pre_vals_sub_2' ignore='0' class='Function' file='fun_set_compute_pre_vals_sub_2'>
        </node>
        <node name='set_cholesky_PF2_b' ignore='0' class='Function' file='fun_set_cholesky_PF2_b'>
            <dep name='mat_eq_def_2_1' />
        </node>
        <node name='set_cholesky_PF2_A1' ignore='0' class='Function' file='fun_set_cholesky_PF2_A1'>
            <dep name='mat_eq_def_2_2' />
        </node>
    </hierarchy>
    <hierarchy_dot>digraph lemma_hierachy {
    	update_x_ensures_l122 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_nc [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	update_x [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_pathfollowing_X [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	omega_beta_gamma [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	norm_pre_pos [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	mat_eq_def [style = "filled, bold,solid" color = "darkblue", fillcolor = "blue"];
    	update_x_ensures_l11 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	norm_pos [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_cholesky_PF2_b1_sub_1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	mult_inner_neg [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	update_x_ensures_l12 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	norm_sep [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	update_x_ensures_l1 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	norm_scal [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	mult_idR [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	mult_inner_pos [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	optimality [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	compute_dx [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	compute_pre [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	update_x_ensures [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_compute_pre_grad_sub_0 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	theorem_4_1_14 [style = "filled, bold,solid" color = "darkblue", fillcolor = "blue"];
    	lemma_4_2_1 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	mult_idL [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	theorem_4_1_14_apply [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	mat_eq_def_1_1 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	update_t_ensures1_l331 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	mat_scal_dev [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	update_t_ensures1_l33 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	update_x_ensures_l1221 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	Amat_scal [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	cholesky_PF2 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	omega_inc [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	update_t_ensures1_l321 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	Amult [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	update_t [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_compute_pre_vals [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_compute_pre_grad_sub_1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	update_t_ensures1_l32 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	update_x_ensures_l1222 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	Aadd [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_compute_pre_hess_sub_0 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_pathfollowing_X_sub_0 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	update_t_ensures1_l31 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	bet_gam_inf1 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	mat_eq_def_2_2 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	update_t_ensures1_l3 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	mat_eq_def_5_1 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_compute_pre_hess [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	update_x_ensures_l121 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	update_t_ensures1_l2 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_pathfollowing_dx [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_compute_pre_hess_sub_1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	norm_tri [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_pathfollowing_X_sub_1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_cholesky_PF2_b_sub_1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_pathfollowing_X1_sub_0 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	update_t_ensures1_l11 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_cholesky_PF2_b1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_compute_pre_vals_sub_3 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_pathfollowing_dx_sub_0 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_compute_dt_pre_nc [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	update_t_ensures1_l12 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_cholesky_PF2_A_sub_0 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	update_t_ensures1_l1 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_compute_pre_hess_sub_2 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_cholesky_PF2_A1_sub_1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_pathfollowing_X1_sub_1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	PF2_LOWER_POS [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	update_t_ensures1_l0 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_compute_pre_vals_sub_4 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	PF2_LOWER_ONE [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_pathfollowing_dx_sub_1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	update_t_ensures1 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	compute [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	PF2_myoptimality [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_cholesky_PF2_A_sub_1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_pathfollowing_X1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_compute_pre_hess_sub_3 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	update_t_ensures2 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	PF2_pathfollowing_ensures2 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_compute_pre_vals_sub_0 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_cholesky_PF2_A1_sub_2 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	PF2_pathfollowing_invariant4 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	compute_dt [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_cholesky_PF2_A [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_compute_dt_pre_nc_sub_0 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	PF2_acc_gt [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	PF2_pathfollowing_pre_update [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_cholesky_PF2_A_sub_2 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_cholesky_PF2_b_sub_0 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_cholesky_PF2_b1_sub_0 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_compute_pre_vals_sub_1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_cholesky_PF2_A1_sub_0 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_cholesky_PF2_A1_sub_3 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	mat_eq_def_2_1 [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	PF2_analytic_center [style = "filled, bold,solid" color = "darkblue", fillcolor = "blue"];
    	PF2_ncca [style = "filled, bold,solid" color = "#BC9481", fillcolor = "red"];
    	set_compute_pre_grad [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	pathfollowing [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_cholesky_PF2_A_sub_3 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_compute_pre_vals_sub_2 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_cholesky_PF2_b [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    	set_cholesky_PF2_A1 [style = "filled, bold,rounded" color = "#2F521B", fillcolor = "red"];
    
    
    
    	update_x_ensures_l1221 -> update_x_ensures_l122;
    	update_x_ensures_l1222 -> update_x_ensures_l122;
    	theorem_4_1_14_apply -> update_x;
    	update_x_ensures -> update_x;
    	mat_eq_def_2_1 -> set_pathfollowing_X;
    	omega_beta_gamma -> update_x_ensures_l11;
    	update_x_ensures_l121 -> update_x_ensures_l12;
    	update_x_ensures_l122 -> update_x_ensures_l12;
    	update_x_ensures_l11 -> update_x_ensures_l1;
    	update_x_ensures_l12 -> update_x_ensures_l1;
    	Amult -> compute_dx;
    	mult_idL -> compute_dx;
    	update_x_ensures_l1 -> update_x_ensures;
    	theorem_4_1_14 -> theorem_4_1_14_apply;
    	mat_eq_def -> mat_eq_def_1_1;
    	norm_sep -> update_t_ensures1_l33;
    	update_t_ensures1_l331 -> update_t_ensures1_l33;
    	Amat_scal -> update_t_ensures1_l321;
    	mat_eq_def -> Amult;
    	mult_inner_pos -> Amult;
    	mult_inner_neg -> Amult;
    	lemma_4_2_1 -> update_t;
    	update_t_ensures1 -> update_t;
    	update_t_ensures2 -> update_t;
    	mat_eq_def_5_1 -> set_compute_pre_vals;
    	norm_scal -> update_t_ensures1_l32;
    	omega_inc -> update_x_ensures_l1222;
    	bet_gam_inf1 -> update_x_ensures_l1222;
    	norm_pos -> update_x_ensures_l1222;
    	mat_eq_def -> mat_eq_def_2_2;
    	update_t_ensures1_l31 -> update_t_ensures1_l3;
    	update_t_ensures1_l32 -> update_t_ensures1_l3;
    	update_t_ensures1_l33 -> update_t_ensures1_l3;
    	mat_eq_def -> mat_eq_def_5_1;
    	mat_eq_def_2_2 -> set_compute_pre_hess;
    	theorem_4_1_14_apply -> update_x_ensures_l121;
    	mat_eq_def_2_1 -> set_pathfollowing_dx;
    	mat_scal_dev -> update_t_ensures1_l11;
    	Aadd -> update_t_ensures1_l11;
    	mat_eq_def_2_1 -> set_cholesky_PF2_b1;
    	mat_eq_def_1_1 -> set_compute_dt_pre_nc;
    	norm_tri -> update_t_ensures1_l12;
    	update_t_ensures1_l11 -> update_t_ensures1_l1;
    	update_t_ensures1_l12 -> update_t_ensures1_l1;
    	update_t_ensures1_l1 -> update_t_ensures1_l0;
    	update_t_ensures1_l2 -> update_t_ensures1_l0;
    	update_t_ensures1_l3 -> update_t_ensures1_l0;
    	update_t_ensures1_l0 -> update_t_ensures1;
    	PF2_analytic_center -> compute;
    	mat_eq_def_2_1 -> set_pathfollowing_X1;
    	mat_eq_def_2_1 -> compute_dt;
    	mat_eq_def_2_2 -> compute_dt;
    	norm_pre_pos -> compute_dt;
    	norm_pos -> compute_dt;
    	norm_sep -> compute_dt;
    	Amult -> compute_dt;
    	mult_idL -> compute_dt;
    	mat_eq_def_2_2 -> set_cholesky_PF2_A;
    	mat_eq_def -> mat_eq_def_2_1;
    	mat_eq_def_2_1 -> set_compute_pre_grad;
    	PF2_LOWER_ONE -> pathfollowing;
    	PF2_LOWER_POS -> pathfollowing;
    	PF2_myoptimality -> pathfollowing;
    	PF2_ncca -> pathfollowing;
    	PF2_acc_gt -> pathfollowing;
    	PF2_pathfollowing_ensures2 -> pathfollowing;
    	PF2_pathfollowing_invariant4 -> pathfollowing;
    	PF2_pathfollowing_pre_update -> pathfollowing;
    	mat_eq_def_2_1 -> set_cholesky_PF2_b;
    	mat_eq_def_2_2 -> set_cholesky_PF2_A1;
    }</hierarchy_dot>
    <hierarchy_svg><!-- Generated by graphviz version 2.30.1 (20150306.0020)
     -->
    <!-- Title: lemma_hierachy Pages: 1 -->
    <svg width="13017pt" height="548pt"
     viewBox="0.00 0.00 13017.00 548.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 544)">
    <title>lemma_hierachy</title>
    <polygon fill="white" stroke="white" points="-4,5 -4,-544 13014,-544 13014,5 -4,5"/>
    <!-- update_x_ensures_l122 -->
    <g id="node1" class="node"><title>update_x_ensures_l122</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="282" cy="-306" rx="93.3873" ry="18"/>
    <text text-anchor="middle" x="282" y="-302.3" font-family="Times,serif" font-size="14.00">update_x_ensures_l122</text>
    </g>
    <!-- update_x_ensures_l12 -->
    <g id="node12" class="node"><title>update_x_ensures_l12</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="436" cy="-234" rx="89.0632" ry="18"/>
    <text text-anchor="middle" x="436" y="-230.3" font-family="Times,serif" font-size="14.00">update_x_ensures_l12</text>
    </g>
    <!-- update_x_ensures_l122&#45;&gt;update_x_ensures_l12 -->
    <g id="edge8" class="edge"><title>update_x_ensures_l122&#45;&gt;update_x_ensures_l12</title>
    <path fill="none" stroke="black" d="M316.945,-289.116C339.273,-278.967 368.406,-265.724 392.265,-254.88"/>
    <polygon fill="black" stroke="black" points="393.804,-258.025 401.459,-250.701 390.907,-251.652 393.804,-258.025"/>
    </g>
    <!-- set_nc -->
    <g id="node2" class="node"><title>set_nc</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="3286" cy="-522" rx="33.2209" ry="18"/>
    <text text-anchor="middle" x="3286" y="-518.3" font-family="Times,serif" font-size="14.00">set_nc</text>
    </g>
    <!-- update_x -->
    <g id="node3" class="node"><title>update_x</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="540" cy="-18" rx="42.3456" ry="18"/>
    <text text-anchor="middle" x="540" y="-14.3" font-family="Times,serif" font-size="14.00">update_x</text>
    </g>
    <!-- set_pathfollowing_X -->
    <g id="node4" class="node"><title>set_pathfollowing_X</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="2402" cy="-378" rx="85.2138" ry="18"/>
    <text text-anchor="middle" x="2402" y="-374.3" font-family="Times,serif" font-size="14.00">set_pathfollowing_X</text>
    </g>
    <!-- omega_beta_gamma -->
    <g id="node5" class="node"><title>omega_beta_gamma</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="85" cy="-306" rx="85.2138" ry="18"/>
    <text text-anchor="middle" x="85" y="-302.3" font-family="Times,serif" font-size="14.00">omega_beta_gamma</text>
    </g>
    <!-- update_x_ensures_l11 -->
    <g id="node8" class="node"><title>update_x_ensures_l11</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="137" cy="-234" rx="89.0632" ry="18"/>
    <text text-anchor="middle" x="137" y="-230.3" font-family="Times,serif" font-size="14.00">update_x_ensures_l11</text>
    </g>
    <!-- omega_beta_gamma&#45;&gt;update_x_ensures_l11 -->
    <g id="edge6" class="edge"><title>omega_beta_gamma&#45;&gt;update_x_ensures_l11</title>
    <path fill="none" stroke="black" d="M97.5877,-288.055C103.755,-279.753 111.309,-269.584 118.148,-260.378"/>
    <polygon fill="black" stroke="black" points="121.013,-262.39 124.167,-252.275 115.394,-258.216 121.013,-262.39"/>
    </g>
    <!-- norm_pre_pos -->
    <g id="node6" class="node"><title>norm_pre_pos</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1555" cy="-450" rx="61.6163" ry="18"/>
    <text text-anchor="middle" x="1555" y="-446.3" font-family="Times,serif" font-size="14.00">norm_pre_pos</text>
    </g>
    <!-- compute_dt -->
    <g id="node86" class="node"><title>compute_dt</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="1460" cy="-378" rx="52.4675" ry="18"/>
    <text text-anchor="middle" x="1460" y="-374.3" font-family="Times,serif" font-size="14.00">compute_dt</text>
    </g>
    <!-- norm_pre_pos&#45;&gt;compute_dt -->
    <g id="edge53" class="edge"><title>norm_pre_pos&#45;&gt;compute_dt</title>
    <path fill="none" stroke="black" d="M1533.44,-433.116C1520.35,-423.472 1503.48,-411.035 1489.2,-400.516"/>
    <polygon fill="black" stroke="black" points="1491.27,-397.694 1481.14,-394.58 1487.12,-403.33 1491.27,-397.694"/>
    </g>
    <!-- mat_eq_def -->
    <g id="node7" class="node"><title>mat_eq_def</title>
    <ellipse fill="blue" stroke="darkblue" stroke-width="2" cx="3182" cy="-522" rx="52.4675" ry="18"/>
    <text text-anchor="middle" x="3182" y="-518.3" font-family="Times,serif" font-size="14.00">mat_eq_def</text>
    </g>
    <!-- mat_eq_def_1_1 -->
    <g id="node27" class="node"><title>mat_eq_def_1_1</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="3182" cy="-450" rx="70.2909" ry="18"/>
    <text text-anchor="middle" x="3182" y="-446.3" font-family="Times,serif" font-size="14.00">mat_eq_def_1_1</text>
    </g>
    <!-- mat_eq_def&#45;&gt;mat_eq_def_1_1 -->
    <g id="edge15" class="edge"><title>mat_eq_def&#45;&gt;mat_eq_def_1_1</title>
    <path fill="none" stroke="black" d="M3182,-503.697C3182,-495.983 3182,-486.712 3182,-478.112"/>
    <polygon fill="black" stroke="black" points="3185.5,-478.104 3182,-468.104 3178.5,-478.104 3185.5,-478.104"/>
    </g>
    <!-- Amult -->
    <g id="node36" class="node"><title>Amult</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1335" cy="-450" rx="33.1991" ry="18"/>
    <text text-anchor="middle" x="1335" y="-446.3" font-family="Times,serif" font-size="14.00">Amult</text>
    </g>
    <!-- mat_eq_def&#45;&gt;Amult -->
    <g id="edge19" class="edge"><title>mat_eq_def&#45;&gt;Amult</title>
    <path fill="none" stroke="black" d="M3129.63,-520.541C2851.48,-517.96 1553.22,-504.054 1378,-468 1375.13,-467.408 1372.19,-466.639 1369.28,-465.755"/>
    <polygon fill="black" stroke="black" points="1370.16,-462.354 1359.56,-462.397 1367.87,-468.97 1370.16,-462.354"/>
    </g>
    <!-- mat_eq_def_2_2 -->
    <g id="node47" class="node"><title>mat_eq_def_2_2</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="3380" cy="-450" rx="70.2909" ry="18"/>
    <text text-anchor="middle" x="3380" y="-446.3" font-family="Times,serif" font-size="14.00">mat_eq_def_2_2</text>
    </g>
    <!-- mat_eq_def&#45;&gt;mat_eq_def_2_2 -->
    <g id="edge30" class="edge"><title>mat_eq_def&#45;&gt;mat_eq_def_2_2</title>
    <path fill="none" stroke="black" d="M3217.4,-508.485C3249.02,-497.306 3295.65,-480.82 3330.88,-468.366"/>
    <polygon fill="black" stroke="black" points="3332.23,-471.601 3340.49,-464.968 3329.9,-465.001 3332.23,-471.601"/>
    </g>
    <!-- mat_eq_def_5_1 -->
    <g id="node49" class="node"><title>mat_eq_def_5_1</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="3754" cy="-450" rx="70.2909" ry="18"/>
    <text text-anchor="middle" x="3754" y="-446.3" font-family="Times,serif" font-size="14.00">mat_eq_def_5_1</text>
    </g>
    <!-- mat_eq_def&#45;&gt;mat_eq_def_5_1 -->
    <g id="edge34" class="edge"><title>mat_eq_def&#45;&gt;mat_eq_def_5_1</title>
    <path fill="none" stroke="black" d="M3220.14,-509.488C3227.97,-507.421 3236.21,-505.462 3244,-504 3395.41,-475.574 3575.17,-461.36 3675.76,-455.134"/>
    <polygon fill="black" stroke="black" points="3676.07,-458.621 3685.84,-454.52 3675.65,-451.634 3676.07,-458.621"/>
    </g>
    <!-- mat_eq_def_2_1 -->
    <g id="node97" class="node"><title>mat_eq_def_2_1</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="2497" cy="-450" rx="70.2909" ry="18"/>
    <text text-anchor="middle" x="2497" y="-446.3" font-family="Times,serif" font-size="14.00">mat_eq_def_2_1</text>
    </g>
    <!-- mat_eq_def&#45;&gt;mat_eq_def_2_1 -->
    <g id="edge59" class="edge"><title>mat_eq_def&#45;&gt;mat_eq_def_2_1</title>
    <path fill="none" stroke="black" d="M3132.46,-515.938C3013.58,-503.79 2711.62,-472.932 2571.06,-458.569"/>
    <polygon fill="black" stroke="black" points="2571.13,-455.057 2560.82,-457.522 2570.41,-462.02 2571.13,-455.057"/>
    </g>
    <!-- update_x_ensures_l1 -->
    <g id="node14" class="node"><title>update_x_ensures_l1</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="436" cy="-162" rx="85.2138" ry="18"/>
    <text text-anchor="middle" x="436" y="-158.3" font-family="Times,serif" font-size="14.00">update_x_ensures_l1</text>
    </g>
    <!-- update_x_ensures_l11&#45;&gt;update_x_ensures_l1 -->
    <g id="edge9" class="edge"><title>update_x_ensures_l11&#45;&gt;update_x_ensures_l1</title>
    <path fill="none" stroke="black" d="M192.889,-219.916C243.464,-208.075 317.956,-190.636 371.138,-178.185"/>
    <polygon fill="black" stroke="black" points="372.204,-181.53 381.143,-175.843 370.608,-174.715 372.204,-181.53"/>
    </g>
    <!-- norm_pos -->
    <g id="node9" class="node"><title>norm_pos</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="751" cy="-450" rx="46.2191" ry="18"/>
    <text text-anchor="middle" x="751" y="-446.3" font-family="Times,serif" font-size="14.00">norm_pos</text>
    </g>
    <!-- update_x_ensures_l1222 -->
    <g id="node41" class="node"><title>update_x_ensures_l1222</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="340" cy="-378" rx="98.212" ry="18"/>
    <text text-anchor="middle" x="340" y="-374.3" font-family="Times,serif" font-size="14.00">update_x_ensures_l1222</text>
    </g>
    <!-- norm_pos&#45;&gt;update_x_ensures_l1222 -->
    <g id="edge29" class="edge"><title>norm_pos&#45;&gt;update_x_ensures_l1222</title>
    <path fill="none" stroke="black" d="M716.863,-437.746C709.693,-435.634 702.14,-433.592 695,-432 586.293,-407.755 557.112,-412.739 447,-396 438.556,-394.716 429.74,-393.353 420.951,-391.979"/>
    <polygon fill="black" stroke="black" points="421.482,-388.52 411.061,-390.427 420.397,-395.435 421.482,-388.52"/>
    </g>
    <!-- norm_pos&#45;&gt;compute_dt -->
    <g id="edge54" class="edge"><title>norm_pos&#45;&gt;compute_dt</title>
    <path fill="none" stroke="black" d="M784.13,-437.364C791.266,-435.252 798.822,-433.308 806,-432 1065.33,-384.742 1137.95,-439.082 1398,-396 1402.77,-395.209 1407.71,-394.199 1412.61,-393.066"/>
    <polygon fill="black" stroke="black" points="1413.71,-396.401 1422.57,-390.6 1412.02,-389.606 1413.71,-396.401"/>
    </g>
    <!-- set_cholesky_PF2_b1_sub_1 -->
    <g id="node10" class="node"><title>set_cholesky_PF2_b1_sub_1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="3450" cy="-522" rx="113.135" ry="18"/>
    <text text-anchor="middle" x="3450" y="-518.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_b1_sub_1</text>
    </g>
    <!-- mult_inner_neg -->
    <g id="node11" class="node"><title>mult_inner_neg</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1411" cy="-522" rx="66.4165" ry="18"/>
    <text text-anchor="middle" x="1411" y="-518.3" font-family="Times,serif" font-size="14.00">mult_inner_neg</text>
    </g>
    <!-- mult_inner_neg&#45;&gt;Amult -->
    <g id="edge21" class="edge"><title>mult_inner_neg&#45;&gt;Amult</title>
    <path fill="none" stroke="black" d="M1392.99,-504.411C1382.75,-494.976 1369.79,-483.047 1358.73,-472.856"/>
    <polygon fill="black" stroke="black" points="1360.8,-470.004 1351.07,-465.804 1356.06,-475.153 1360.8,-470.004"/>
    </g>
    <!-- update_x_ensures_l12&#45;&gt;update_x_ensures_l1 -->
    <g id="edge10" class="edge"><title>update_x_ensures_l12&#45;&gt;update_x_ensures_l1</title>
    <path fill="none" stroke="black" d="M436,-215.697C436,-207.983 436,-198.712 436,-190.112"/>
    <polygon fill="black" stroke="black" points="439.5,-190.104 436,-180.104 432.5,-190.104 439.5,-190.104"/>
    </g>
    <!-- norm_sep -->
    <g id="node13" class="node"><title>norm_sep</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1681" cy="-450" rx="46.2191" ry="18"/>
    <text text-anchor="middle" x="1681" y="-446.3" font-family="Times,serif" font-size="14.00">norm_sep</text>
    </g>
    <!-- update_t_ensures1_l33 -->
    <g id="node30" class="node"><title>update_t_ensures1_l33</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1823" cy="-378" rx="91.4625" ry="18"/>
    <text text-anchor="middle" x="1823" y="-374.3" font-family="Times,serif" font-size="14.00">update_t_ensures1_l33</text>
    </g>
    <!-- norm_sep&#45;&gt;update_t_ensures1_l33 -->
    <g id="edge16" class="edge"><title>norm_sep&#45;&gt;update_t_ensures1_l33</title>
    <path fill="none" stroke="black" d="M1708.38,-435.503C1729.15,-425.262 1758.07,-411.01 1781.65,-399.382"/>
    <polygon fill="black" stroke="black" points="1783.31,-402.467 1790.73,-394.906 1780.22,-396.188 1783.31,-402.467"/>
    </g>
    <!-- norm_sep&#45;&gt;compute_dt -->
    <g id="edge55" class="edge"><title>norm_sep&#45;&gt;compute_dt</title>
    <path fill="none" stroke="black" d="M1646.47,-438.062C1608.93,-426.173 1548.72,-407.102 1506.92,-393.861"/>
    <polygon fill="black" stroke="black" points="1507.83,-390.478 1497.24,-390.795 1505.72,-397.152 1507.83,-390.478"/>
    </g>
    <!-- update_x_ensures -->
    <g id="node21" class="node"><title>update_x_ensures</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="472" cy="-90" rx="73.1654" ry="18"/>
    <text text-anchor="middle" x="472" y="-86.3" font-family="Times,serif" font-size="14.00">update_x_ensures</text>
    </g>
    <!-- update_x_ensures_l1&#45;&gt;update_x_ensures -->
    <g id="edge13" class="edge"><title>update_x_ensures_l1&#45;&gt;update_x_ensures</title>
    <path fill="none" stroke="black" d="M444.715,-144.055C448.854,-136.007 453.895,-126.205 458.512,-117.226"/>
    <polygon fill="black" stroke="black" points="461.655,-118.769 463.116,-108.275 455.43,-115.567 461.655,-118.769"/>
    </g>
    <!-- norm_scal -->
    <g id="node15" class="node"><title>norm_scal</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1171" cy="-450" rx="48.1437" ry="18"/>
    <text text-anchor="middle" x="1171" y="-446.3" font-family="Times,serif" font-size="14.00">norm_scal</text>
    </g>
    <!-- update_t_ensures1_l32 -->
    <g id="node40" class="node"><title>update_t_ensures1_l32</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1171" cy="-378" rx="91.4625" ry="18"/>
    <text text-anchor="middle" x="1171" y="-374.3" font-family="Times,serif" font-size="14.00">update_t_ensures1_l32</text>
    </g>
    <!-- norm_scal&#45;&gt;update_t_ensures1_l32 -->
    <g id="edge26" class="edge"><title>norm_scal&#45;&gt;update_t_ensures1_l32</title>
    <path fill="none" stroke="black" d="M1171,-431.697C1171,-423.983 1171,-414.712 1171,-406.112"/>
    <polygon fill="black" stroke="black" points="1174.5,-406.104 1171,-396.104 1167.5,-406.104 1174.5,-406.104"/>
    </g>
    <!-- mult_idR -->
    <g id="node16" class="node"><title>mult_idR</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="3625" cy="-522" rx="44.2946" ry="18"/>
    <text text-anchor="middle" x="3625" y="-518.3" font-family="Times,serif" font-size="14.00">mult_idR</text>
    </g>
    <!-- mult_inner_pos -->
    <g id="node17" class="node"><title>mult_inner_pos</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1260" cy="-522" rx="65.9423" ry="18"/>
    <text text-anchor="middle" x="1260" y="-518.3" font-family="Times,serif" font-size="14.00">mult_inner_pos</text>
    </g>
    <!-- mult_inner_pos&#45;&gt;Amult -->
    <g id="edge20" class="edge"><title>mult_inner_pos&#45;&gt;Amult</title>
    <path fill="none" stroke="black" d="M1277.77,-504.411C1287.81,-495.041 1300.49,-483.211 1311.36,-473.067"/>
    <polygon fill="black" stroke="black" points="1313.97,-475.42 1318.89,-466.038 1309.19,-470.303 1313.97,-475.42"/>
    </g>
    <!-- optimality -->
    <g id="node18" class="node"><title>optimality</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="3735" cy="-522" rx="47.169" ry="18"/>
    <text text-anchor="middle" x="3735" y="-518.3" font-family="Times,serif" font-size="14.00">optimality</text>
    </g>
    <!-- compute_dx -->
    <g id="node19" class="node"><title>compute_dx</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="1335" cy="-378" rx="54.3924" ry="18"/>
    <text text-anchor="middle" x="1335" y="-374.3" font-family="Times,serif" font-size="14.00">compute_dx</text>
    </g>
    <!-- compute_pre -->
    <g id="node20" class="node"><title>compute_pre</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="3858" cy="-522" rx="57.2927" ry="18"/>
    <text text-anchor="middle" x="3858" y="-518.3" font-family="Times,serif" font-size="14.00">compute_pre</text>
    </g>
    <!-- update_x_ensures&#45;&gt;update_x -->
    <g id="edge4" class="edge"><title>update_x_ensures&#45;&gt;update_x</title>
    <path fill="none" stroke="black" d="M488.115,-72.411C496.878,-63.3901 507.857,-52.0882 517.457,-42.2065"/>
    <polygon fill="black" stroke="black" points="520.011,-44.5997 524.469,-34.9881 514.99,-39.7222 520.011,-44.5997"/>
    </g>
    <!-- set_compute_pre_grad_sub_0 -->
    <g id="node22" class="node"><title>set_compute_pre_grad_sub_0</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="4050" cy="-522" rx="116.01" ry="18"/>
    <text text-anchor="middle" x="4050" y="-518.3" font-family="Times,serif" font-size="14.00">set_compute_pre_grad_sub_0</text>
    </g>
    <!-- theorem_4_1_14 -->
    <g id="node23" class="node"><title>theorem_4_1_14</title>
    <ellipse fill="blue" stroke="darkblue" stroke-width="2" cx="538" cy="-450" rx="70.2668" ry="18"/>
    <text text-anchor="middle" x="538" y="-446.3" font-family="Times,serif" font-size="14.00">theorem_4_1_14</text>
    </g>
    <!-- theorem_4_1_14_apply -->
    <g id="node26" class="node"><title>theorem_4_1_14_apply</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="551" cy="-378" rx="94.338" ry="18"/>
    <text text-anchor="middle" x="551" y="-374.3" font-family="Times,serif" font-size="14.00">theorem_4_1_14_apply</text>
    </g>
    <!-- theorem_4_1_14&#45;&gt;theorem_4_1_14_apply -->
    <g id="edge14" class="edge"><title>theorem_4_1_14&#45;&gt;theorem_4_1_14_apply</title>
    <path fill="none" stroke="black" d="M541.213,-431.697C542.646,-423.983 544.368,-414.712 545.965,-406.112"/>
    <polygon fill="black" stroke="black" points="549.439,-406.575 547.823,-396.104 542.556,-405.297 549.439,-406.575"/>
    </g>
    <!-- lemma_4_2_1 -->
    <g id="node24" class="node"><title>lemma_4_2_1</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1552" cy="-162" rx="61.6163" ry="18"/>
    <text text-anchor="middle" x="1552" y="-158.3" font-family="Times,serif" font-size="14.00">lemma_4_2_1</text>
    </g>
    <!-- update_t -->
    <g id="node37" class="node"><title>update_t</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="1552" cy="-90" rx="40.4202" ry="18"/>
    <text text-anchor="middle" x="1552" y="-86.3" font-family="Times,serif" font-size="14.00">update_t</text>
    </g>
    <!-- lemma_4_2_1&#45;&gt;update_t -->
    <g id="edge22" class="edge"><title>lemma_4_2_1&#45;&gt;update_t</title>
    <path fill="none" stroke="black" d="M1552,-143.697C1552,-135.983 1552,-126.712 1552,-118.112"/>
    <polygon fill="black" stroke="black" points="1555.5,-118.104 1552,-108.104 1548.5,-118.104 1555.5,-118.104"/>
    </g>
    <!-- mult_idL -->
    <g id="node25" class="node"><title>mult_idL</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1431" cy="-450" rx="44.2946" ry="18"/>
    <text text-anchor="middle" x="1431" y="-446.3" font-family="Times,serif" font-size="14.00">mult_idL</text>
    </g>
    <!-- mult_idL&#45;&gt;compute_dx -->
    <g id="edge12" class="edge"><title>mult_idL&#45;&gt;compute_dx</title>
    <path fill="none" stroke="black" d="M1410.17,-433.811C1396.89,-424.13 1379.48,-411.435 1364.76,-400.7"/>
    <polygon fill="black" stroke="black" points="1366.6,-397.708 1356.45,-394.644 1362.47,-403.364 1366.6,-397.708"/>
    </g>
    <!-- mult_idL&#45;&gt;compute_dt -->
    <g id="edge57" class="edge"><title>mult_idL&#45;&gt;compute_dt</title>
    <path fill="none" stroke="black" d="M1438.02,-432.055C1441.28,-424.176 1445.24,-414.617 1448.9,-405.794"/>
    <polygon fill="black" stroke="black" points="1452.25,-406.853 1452.84,-396.275 1445.78,-404.174 1452.25,-406.853"/>
    </g>
    <!-- theorem_4_1_14_apply&#45;&gt;update_x -->
    <g id="edge3" class="edge"><title>theorem_4_1_14_apply&#45;&gt;update_x</title>
    <path fill="none" stroke="black" d="M565.93,-359.949C573.866,-350.06 583.163,-337.017 589,-324 605.588,-287.007 609,-275.542 609,-235 609,-235 609,-235 609,-161 609,-115.987 580.604,-70.2886 560.245,-43.3086"/>
    <polygon fill="black" stroke="black" points="562.865,-40.9765 553.963,-35.2312 557.339,-45.2737 562.865,-40.9765"/>
    </g>
    <!-- update_x_ensures_l121 -->
    <g id="node51" class="node"><title>update_x_ensures_l121</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="487" cy="-306" rx="93.3873" ry="18"/>
    <text text-anchor="middle" x="487" y="-302.3" font-family="Times,serif" font-size="14.00">update_x_ensures_l121</text>
    </g>
    <!-- theorem_4_1_14_apply&#45;&gt;update_x_ensures_l121 -->
    <g id="edge36" class="edge"><title>theorem_4_1_14_apply&#45;&gt;update_x_ensures_l121</title>
    <path fill="none" stroke="black" d="M535.507,-360.055C527.646,-351.457 517.955,-340.857 509.306,-331.397"/>
    <polygon fill="black" stroke="black" points="511.681,-328.808 502.35,-323.789 506.515,-333.531 511.681,-328.808"/>
    </g>
    <!-- set_compute_dt_pre_nc -->
    <g id="node63" class="node"><title>set_compute_dt_pre_nc</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="3182" cy="-378" rx="94.338" ry="18"/>
    <text text-anchor="middle" x="3182" y="-374.3" font-family="Times,serif" font-size="14.00">set_compute_dt_pre_nc</text>
    </g>
    <!-- mat_eq_def_1_1&#45;&gt;set_compute_dt_pre_nc -->
    <g id="edge41" class="edge"><title>mat_eq_def_1_1&#45;&gt;set_compute_dt_pre_nc</title>
    <path fill="none" stroke="black" d="M3182,-431.697C3182,-423.983 3182,-414.712 3182,-406.112"/>
    <polygon fill="black" stroke="black" points="3185.5,-406.104 3182,-396.104 3178.5,-406.104 3185.5,-406.104"/>
    </g>
    <!-- update_t_ensures1_l331 -->
    <g id="node28" class="node"><title>update_t_ensures1_l331</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1841" cy="-450" rx="96.2874" ry="18"/>
    <text text-anchor="middle" x="1841" y="-446.3" font-family="Times,serif" font-size="14.00">update_t_ensures1_l331</text>
    </g>
    <!-- update_t_ensures1_l331&#45;&gt;update_t_ensures1_l33 -->
    <g id="edge17" class="edge"><title>update_t_ensures1_l331&#45;&gt;update_t_ensures1_l33</title>
    <path fill="none" stroke="black" d="M1836.55,-431.697C1834.55,-423.898 1832.13,-414.509 1829.9,-405.829"/>
    <polygon fill="black" stroke="black" points="1833.28,-404.918 1827.4,-396.104 1826.5,-406.661 1833.28,-404.918"/>
    </g>
    <!-- mat_scal_dev -->
    <g id="node29" class="node"><title>mat_scal_dev</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="875" cy="-450" rx="59.1941" ry="18"/>
    <text text-anchor="middle" x="875" y="-446.3" font-family="Times,serif" font-size="14.00">mat_scal_dev</text>
    </g>
    <!-- update_t_ensures1_l11 -->
    <g id="node59" class="node"><title>update_t_ensures1_l11</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="769" cy="-378" rx="91.4625" ry="18"/>
    <text text-anchor="middle" x="769" y="-374.3" font-family="Times,serif" font-size="14.00">update_t_ensures1_l11</text>
    </g>
    <!-- mat_scal_dev&#45;&gt;update_t_ensures1_l11 -->
    <g id="edge38" class="edge"><title>mat_scal_dev&#45;&gt;update_t_ensures1_l11</title>
    <path fill="none" stroke="black" d="M851.475,-433.465C837.066,-423.949 818.394,-411.619 802.461,-401.097"/>
    <polygon fill="black" stroke="black" points="804.209,-398.057 793.936,-395.467 800.352,-403.898 804.209,-398.057"/>
    </g>
    <!-- update_t_ensures1_l3 -->
    <g id="node48" class="node"><title>update_t_ensures1_l3</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1396" cy="-306" rx="87.1385" ry="18"/>
    <text text-anchor="middle" x="1396" y="-302.3" font-family="Times,serif" font-size="14.00">update_t_ensures1_l3</text>
    </g>
    <!-- update_t_ensures1_l33&#45;&gt;update_t_ensures1_l3 -->
    <g id="edge33" class="edge"><title>update_t_ensures1_l33&#45;&gt;update_t_ensures1_l3</title>
    <path fill="none" stroke="black" d="M1756.19,-365.644C1744.79,-363.737 1733.06,-361.796 1722,-360 1619.87,-343.413 1594.06,-341.022 1492,-324 1484.63,-322.771 1476.94,-321.46 1469.27,-320.132"/>
    <polygon fill="black" stroke="black" points="1469.68,-316.65 1459.23,-318.382 1468.48,-323.546 1469.68,-316.65"/>
    </g>
    <!-- update_x_ensures_l1221 -->
    <g id="node31" class="node"><title>update_x_ensures_l1221</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="126" cy="-378" rx="98.212" ry="18"/>
    <text text-anchor="middle" x="126" y="-374.3" font-family="Times,serif" font-size="14.00">update_x_ensures_l1221</text>
    </g>
    <!-- update_x_ensures_l1221&#45;&gt;update_x_ensures_l122 -->
    <g id="edge1" class="edge"><title>update_x_ensures_l1221&#45;&gt;update_x_ensures_l122</title>
    <path fill="none" stroke="black" d="M161.399,-361.116C184.017,-350.967 213.528,-337.724 237.697,-326.88"/>
    <polygon fill="black" stroke="black" points="239.32,-329.988 247.01,-322.701 236.454,-323.601 239.32,-329.988"/>
    </g>
    <!-- Amat_scal -->
    <g id="node32" class="node"><title>Amat_scal</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="4233" cy="-522" rx="48.6179" ry="18"/>
    <text text-anchor="middle" x="4233" y="-518.3" font-family="Times,serif" font-size="14.00">Amat_scal</text>
    </g>
    <!-- update_t_ensures1_l321 -->
    <g id="node35" class="node"><title>update_t_ensures1_l321</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="4233" cy="-450" rx="96.2874" ry="18"/>
    <text text-anchor="middle" x="4233" y="-446.3" font-family="Times,serif" font-size="14.00">update_t_ensures1_l321</text>
    </g>
    <!-- Amat_scal&#45;&gt;update_t_ensures1_l321 -->
    <g id="edge18" class="edge"><title>Amat_scal&#45;&gt;update_t_ensures1_l321</title>
    <path fill="none" stroke="black" d="M4233,-503.697C4233,-495.983 4233,-486.712 4233,-478.112"/>
    <polygon fill="black" stroke="black" points="4236.5,-478.104 4233,-468.104 4229.5,-478.104 4236.5,-478.104"/>
    </g>
    <!-- cholesky_PF2 -->
    <g id="node33" class="node"><title>cholesky_PF2</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="4360" cy="-522" rx="60.1672" ry="18"/>
    <text text-anchor="middle" x="4360" y="-518.3" font-family="Times,serif" font-size="14.00">cholesky_PF2</text>
    </g>
    <!-- omega_inc -->
    <g id="node34" class="node"><title>omega_inc</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="217" cy="-450" rx="50.0684" ry="18"/>
    <text text-anchor="middle" x="217" y="-446.3" font-family="Times,serif" font-size="14.00">omega_inc</text>
    </g>
    <!-- omega_inc&#45;&gt;update_x_ensures_l1222 -->
    <g id="edge27" class="edge"><title>omega_inc&#45;&gt;update_x_ensures_l1222</title>
    <path fill="none" stroke="black" d="M242.486,-434.496C259.737,-424.678 282.827,-411.537 302.208,-400.508"/>
    <polygon fill="black" stroke="black" points="304.139,-403.436 311.099,-395.448 300.677,-397.352 304.139,-403.436"/>
    </g>
    <!-- Amult&#45;&gt;compute_dx -->
    <g id="edge11" class="edge"><title>Amult&#45;&gt;compute_dx</title>
    <path fill="none" stroke="black" d="M1335,-431.697C1335,-423.983 1335,-414.712 1335,-406.112"/>
    <polygon fill="black" stroke="black" points="1338.5,-406.104 1335,-396.104 1331.5,-406.104 1338.5,-406.104"/>
    </g>
    <!-- Amult&#45;&gt;compute_dt -->
    <g id="edge56" class="edge"><title>Amult&#45;&gt;compute_dt</title>
    <path fill="none" stroke="black" d="M1357.35,-436.485C1376.03,-426.025 1403,-410.917 1424.62,-398.815"/>
    <polygon fill="black" stroke="black" points="1426.49,-401.774 1433.51,-393.834 1423.07,-395.667 1426.49,-401.774"/>
    </g>
    <!-- set_compute_pre_vals -->
    <g id="node38" class="node"><title>set_compute_pre_vals</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="3971" cy="-378" rx="89.5377" ry="18"/>
    <text text-anchor="middle" x="3971" y="-374.3" font-family="Times,serif" font-size="14.00">set_compute_pre_vals</text>
    </g>
    <!-- set_compute_pre_grad_sub_1 -->
    <g id="node39" class="node"><title>set_compute_pre_grad_sub_1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="4555" cy="-522" rx="116.01" ry="18"/>
    <text text-anchor="middle" x="4555" y="-518.3" font-family="Times,serif" font-size="14.00">set_compute_pre_grad_sub_1</text>
    </g>
    <!-- update_t_ensures1_l32&#45;&gt;update_t_ensures1_l3 -->
    <g id="edge32" class="edge"><title>update_t_ensures1_l32&#45;&gt;update_t_ensures1_l3</title>
    <path fill="none" stroke="black" d="M1217.62,-362.496C1253.19,-351.431 1302.32,-336.146 1340.01,-324.419"/>
    <polygon fill="black" stroke="black" points="1341.32,-327.678 1349.83,-321.366 1339.24,-320.994 1341.32,-327.678"/>
    </g>
    <!-- update_x_ensures_l1222&#45;&gt;update_x_ensures_l122 -->
    <g id="edge2" class="edge"><title>update_x_ensures_l1222&#45;&gt;update_x_ensures_l122</title>
    <path fill="none" stroke="black" d="M325.96,-360.055C319.011,-351.668 310.483,-341.376 302.794,-332.096"/>
    <polygon fill="black" stroke="black" points="305.389,-329.742 296.314,-324.275 299.999,-334.209 305.389,-329.742"/>
    </g>
    <!-- Aadd -->
    <g id="node42" class="node"><title>Aadd</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="657" cy="-450" rx="29.3479" ry="18"/>
    <text text-anchor="middle" x="657" y="-446.3" font-family="Times,serif" font-size="14.00">Aadd</text>
    </g>
    <!-- Aadd&#45;&gt;update_t_ensures1_l11 -->
    <g id="edge39" class="edge"><title>Aadd&#45;&gt;update_t_ensures1_l11</title>
    <path fill="none" stroke="black" d="M676.766,-436.647C692.596,-426.753 715.196,-412.628 734.062,-400.836"/>
    <polygon fill="black" stroke="black" points="736.078,-403.703 742.703,-395.435 732.368,-397.767 736.078,-403.703"/>
    </g>
    <!-- set_compute_pre_hess_sub_0 -->
    <g id="node43" class="node"><title>set_compute_pre_hess_sub_0</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="4806" cy="-522" rx="116.01" ry="18"/>
    <text text-anchor="middle" x="4806" y="-518.3" font-family="Times,serif" font-size="14.00">set_compute_pre_hess_sub_0</text>
    </g>
    <!-- set_pathfollowing_X_sub_0 -->
    <g id="node44" class="node"><title>set_pathfollowing_X_sub_0</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="5051" cy="-522" rx="110.235" ry="18"/>
    <text text-anchor="middle" x="5051" y="-518.3" font-family="Times,serif" font-size="14.00">set_pathfollowing_X_sub_0</text>
    </g>
    <!-- update_t_ensures1_l31 -->
    <g id="node45" class="node"><title>update_t_ensures1_l31</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1622" cy="-378" rx="91.4625" ry="18"/>
    <text text-anchor="middle" x="1622" y="-374.3" font-family="Times,serif" font-size="14.00">update_t_ensures1_l31</text>
    </g>
    <!-- update_t_ensures1_l31&#45;&gt;update_t_ensures1_l3 -->
    <g id="edge31" class="edge"><title>update_t_ensures1_l31&#45;&gt;update_t_ensures1_l3</title>
    <path fill="none" stroke="black" d="M1575.17,-362.496C1539.45,-351.431 1490.1,-336.146 1452.24,-324.419"/>
    <polygon fill="black" stroke="black" points="1452.97,-320.981 1442.38,-321.366 1450.9,-327.668 1452.97,-320.981"/>
    </g>
    <!-- bet_gam_inf1 -->
    <g id="node46" class="node"><title>bet_gam_inf1</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="345" cy="-450" rx="59.1941" ry="18"/>
    <text text-anchor="middle" x="345" y="-446.3" font-family="Times,serif" font-size="14.00">bet_gam_inf1</text>
    </g>
    <!-- bet_gam_inf1&#45;&gt;update_x_ensures_l1222 -->
    <g id="edge28" class="edge"><title>bet_gam_inf1&#45;&gt;update_x_ensures_l1222</title>
    <path fill="none" stroke="black" d="M343.764,-431.697C343.213,-423.983 342.551,-414.712 341.937,-406.112"/>
    <polygon fill="black" stroke="black" points="345.425,-405.83 341.222,-396.104 338.443,-406.328 345.425,-405.83"/>
    </g>
    <!-- set_compute_pre_hess -->
    <g id="node50" class="node"><title>set_compute_pre_hess</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="3772" cy="-378" rx="90.4879" ry="18"/>
    <text text-anchor="middle" x="3772" y="-374.3" font-family="Times,serif" font-size="14.00">set_compute_pre_hess</text>
    </g>
    <!-- mat_eq_def_2_2&#45;&gt;set_compute_pre_hess -->
    <g id="edge35" class="edge"><title>mat_eq_def_2_2&#45;&gt;set_compute_pre_hess</title>
    <path fill="none" stroke="black" d="M3435.75,-439.045C3504.22,-426.817 3620.66,-406.025 3696.96,-392.401"/>
    <polygon fill="black" stroke="black" points="3697.75,-395.814 3706.98,-390.611 3696.52,-388.923 3697.75,-395.814"/>
    </g>
    <!-- mat_eq_def_2_2&#45;&gt;compute_dt -->
    <g id="edge52" class="edge"><title>mat_eq_def_2_2&#45;&gt;compute_dt</title>
    <path fill="none" stroke="black" d="M3322.96,-439.42C3303.37,-436.512 3281.28,-433.652 3261,-432 2875.53,-400.595 1903.62,-452.357 1521,-396 1516.29,-395.306 1511.42,-394.359 1506.59,-393.266"/>
    <polygon fill="black" stroke="black" points="1507.32,-389.842 1496.78,-390.849 1505.65,-396.639 1507.32,-389.842"/>
    </g>
    <!-- set_cholesky_PF2_A -->
    <g id="node87" class="node"><title>set_cholesky_PF2_A</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="3380" cy="-378" rx="85.2138" ry="18"/>
    <text text-anchor="middle" x="3380" y="-374.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_A</text>
    </g>
    <!-- mat_eq_def_2_2&#45;&gt;set_cholesky_PF2_A -->
    <g id="edge58" class="edge"><title>mat_eq_def_2_2&#45;&gt;set_cholesky_PF2_A</title>
    <path fill="none" stroke="black" d="M3380,-431.697C3380,-423.983 3380,-414.712 3380,-406.112"/>
    <polygon fill="black" stroke="black" points="3383.5,-406.104 3380,-396.104 3376.5,-406.104 3383.5,-406.104"/>
    </g>
    <!-- set_cholesky_PF2_A1 -->
    <g id="node105" class="node"><title>set_cholesky_PF2_A1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="3573" cy="-378" rx="89.5377" ry="18"/>
    <text text-anchor="middle" x="3573" y="-374.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_A1</text>
    </g>
    <!-- mat_eq_def_2_2&#45;&gt;set_cholesky_PF2_A1 -->
    <g id="edge70" class="edge"><title>mat_eq_def_2_2&#45;&gt;set_cholesky_PF2_A1</title>
    <path fill="none" stroke="black" d="M3419.06,-434.834C3448.7,-424.082 3489.72,-409.204 3521.96,-397.51"/>
    <polygon fill="black" stroke="black" points="3523.46,-400.691 3531.67,-393.991 3521.07,-394.111 3523.46,-400.691"/>
    </g>
    <!-- update_t_ensures1_l0 -->
    <g id="node71" class="node"><title>update_t_ensures1_l0</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1396" cy="-234" rx="87.1385" ry="18"/>
    <text text-anchor="middle" x="1396" y="-230.3" font-family="Times,serif" font-size="14.00">update_t_ensures1_l0</text>
    </g>
    <!-- update_t_ensures1_l3&#45;&gt;update_t_ensures1_l0 -->
    <g id="edge47" class="edge"><title>update_t_ensures1_l3&#45;&gt;update_t_ensures1_l0</title>
    <path fill="none" stroke="black" d="M1396,-287.697C1396,-279.983 1396,-270.712 1396,-262.112"/>
    <polygon fill="black" stroke="black" points="1399.5,-262.104 1396,-252.104 1392.5,-262.104 1399.5,-262.104"/>
    </g>
    <!-- mat_eq_def_5_1&#45;&gt;set_compute_pre_vals -->
    <g id="edge25" class="edge"><title>mat_eq_def_5_1&#45;&gt;set_compute_pre_vals</title>
    <path fill="none" stroke="black" d="M3795.84,-435.503C3830.1,-424.453 3878.83,-408.733 3916.19,-396.679"/>
    <polygon fill="black" stroke="black" points="3917.48,-399.942 3925.92,-393.541 3915.33,-393.28 3917.48,-399.942"/>
    </g>
    <!-- update_x_ensures_l121&#45;&gt;update_x_ensures_l12 -->
    <g id="edge7" class="edge"><title>update_x_ensures_l121&#45;&gt;update_x_ensures_l12</title>
    <path fill="none" stroke="black" d="M474.654,-288.055C468.605,-279.753 461.197,-269.584 454.49,-260.378"/>
    <polygon fill="black" stroke="black" points="457.304,-258.297 448.586,-252.275 451.646,-262.419 457.304,-258.297"/>
    </g>
    <!-- update_t_ensures1_l2 -->
    <g id="node52" class="node"><title>update_t_ensures1_l2</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1588" cy="-306" rx="87.1385" ry="18"/>
    <text text-anchor="middle" x="1588" y="-302.3" font-family="Times,serif" font-size="14.00">update_t_ensures1_l2</text>
    </g>
    <!-- update_t_ensures1_l2&#45;&gt;update_t_ensures1_l0 -->
    <g id="edge46" class="edge"><title>update_t_ensures1_l2&#45;&gt;update_t_ensures1_l0</title>
    <path fill="none" stroke="black" d="M1546.81,-289.983C1517.45,-279.28 1477.81,-264.827 1446.54,-253.425"/>
    <polygon fill="black" stroke="black" points="1447.71,-250.129 1437.12,-249.992 1445.32,-256.706 1447.71,-250.129"/>
    </g>
    <!-- set_pathfollowing_dx -->
    <g id="node53" class="node"><title>set_pathfollowing_dx</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="2592" cy="-378" rx="87.1385" ry="18"/>
    <text text-anchor="middle" x="2592" y="-374.3" font-family="Times,serif" font-size="14.00">set_pathfollowing_dx</text>
    </g>
    <!-- set_compute_pre_hess_sub_1 -->
    <g id="node54" class="node"><title>set_compute_pre_hess_sub_1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="5296" cy="-522" rx="116.01" ry="18"/>
    <text text-anchor="middle" x="5296" y="-518.3" font-family="Times,serif" font-size="14.00">set_compute_pre_hess_sub_1</text>
    </g>
    <!-- norm_tri -->
    <g id="node55" class="node"><title>norm_tri</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="995" cy="-450" rx="42.3701" ry="18"/>
    <text text-anchor="middle" x="995" y="-446.3" font-family="Times,serif" font-size="14.00">norm_tri</text>
    </g>
    <!-- update_t_ensures1_l12 -->
    <g id="node64" class="node"><title>update_t_ensures1_l12</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="970" cy="-378" rx="91.4625" ry="18"/>
    <text text-anchor="middle" x="970" y="-374.3" font-family="Times,serif" font-size="14.00">update_t_ensures1_l12</text>
    </g>
    <!-- norm_tri&#45;&gt;update_t_ensures1_l12 -->
    <g id="edge42" class="edge"><title>norm_tri&#45;&gt;update_t_ensures1_l12</title>
    <path fill="none" stroke="black" d="M988.948,-432.055C986.134,-424.176 982.72,-414.617 979.569,-405.794"/>
    <polygon fill="black" stroke="black" points="982.829,-404.516 976.17,-396.275 976.237,-406.87 982.829,-404.516"/>
    </g>
    <!-- set_pathfollowing_X_sub_1 -->
    <g id="node56" class="node"><title>set_pathfollowing_X_sub_1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="5541" cy="-522" rx="110.235" ry="18"/>
    <text text-anchor="middle" x="5541" y="-518.3" font-family="Times,serif" font-size="14.00">set_pathfollowing_X_sub_1</text>
    </g>
    <!-- set_cholesky_PF2_b_sub_1 -->
    <g id="node57" class="node"><title>set_cholesky_PF2_b_sub_1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="5778" cy="-522" rx="108.31" ry="18"/>
    <text text-anchor="middle" x="5778" y="-518.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_b_sub_1</text>
    </g>
    <!-- set_pathfollowing_X1_sub_0 -->
    <g id="node58" class="node"><title>set_pathfollowing_X1_sub_0</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="6019" cy="-522" rx="114.085" ry="18"/>
    <text text-anchor="middle" x="6019" y="-518.3" font-family="Times,serif" font-size="14.00">set_pathfollowing_X1_sub_0</text>
    </g>
    <!-- update_t_ensures1_l1 -->
    <g id="node66" class="node"><title>update_t_ensures1_l1</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="970" cy="-306" rx="87.1385" ry="18"/>
    <text text-anchor="middle" x="970" y="-302.3" font-family="Times,serif" font-size="14.00">update_t_ensures1_l1</text>
    </g>
    <!-- update_t_ensures1_l11&#45;&gt;update_t_ensures1_l1 -->
    <g id="edge43" class="edge"><title>update_t_ensures1_l11&#45;&gt;update_t_ensures1_l1</title>
    <path fill="none" stroke="black" d="M812.12,-361.983C843.196,-351.161 885.281,-336.504 918.185,-325.045"/>
    <polygon fill="black" stroke="black" points="919.349,-328.346 927.642,-321.752 917.047,-321.735 919.349,-328.346"/>
    </g>
    <!-- set_cholesky_PF2_b1 -->
    <g id="node60" class="node"><title>set_cholesky_PF2_b1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="2785" cy="-378" rx="87.613" ry="18"/>
    <text text-anchor="middle" x="2785" y="-374.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_b1</text>
    </g>
    <!-- set_compute_pre_vals_sub_3 -->
    <g id="node61" class="node"><title>set_compute_pre_vals_sub_3</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="6266" cy="-522" rx="115.06" ry="18"/>
    <text text-anchor="middle" x="6266" y="-518.3" font-family="Times,serif" font-size="14.00">set_compute_pre_vals_sub_3</text>
    </g>
    <!-- set_pathfollowing_dx_sub_0 -->
    <g id="node62" class="node"><title>set_pathfollowing_dx_sub_0</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="6511" cy="-522" rx="112.16" ry="18"/>
    <text text-anchor="middle" x="6511" y="-518.3" font-family="Times,serif" font-size="14.00">set_pathfollowing_dx_sub_0</text>
    </g>
    <!-- update_t_ensures1_l12&#45;&gt;update_t_ensures1_l1 -->
    <g id="edge44" class="edge"><title>update_t_ensures1_l12&#45;&gt;update_t_ensures1_l1</title>
    <path fill="none" stroke="black" d="M970,-359.697C970,-351.983 970,-342.712 970,-334.112"/>
    <polygon fill="black" stroke="black" points="973.5,-334.104 970,-324.104 966.5,-334.104 973.5,-334.104"/>
    </g>
    <!-- set_cholesky_PF2_A_sub_0 -->
    <g id="node65" class="node"><title>set_cholesky_PF2_A_sub_0</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="6752" cy="-522" rx="110.235" ry="18"/>
    <text text-anchor="middle" x="6752" y="-518.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_A_sub_0</text>
    </g>
    <!-- update_t_ensures1_l1&#45;&gt;update_t_ensures1_l0 -->
    <g id="edge45" class="edge"><title>update_t_ensures1_l1&#45;&gt;update_t_ensures1_l0</title>
    <path fill="none" stroke="black" d="M1036.1,-294.139C1112.86,-281.526 1239.24,-260.758 1320,-247.489"/>
    <polygon fill="black" stroke="black" points="1320.8,-250.904 1330.1,-245.829 1319.67,-243.996 1320.8,-250.904"/>
    </g>
    <!-- set_compute_pre_hess_sub_2 -->
    <g id="node67" class="node"><title>set_compute_pre_hess_sub_2</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="6997" cy="-522" rx="116.01" ry="18"/>
    <text text-anchor="middle" x="6997" y="-518.3" font-family="Times,serif" font-size="14.00">set_compute_pre_hess_sub_2</text>
    </g>
    <!-- set_cholesky_PF2_A1_sub_1 -->
    <g id="node68" class="node"><title>set_cholesky_PF2_A1_sub_1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="7246" cy="-522" rx="115.06" ry="18"/>
    <text text-anchor="middle" x="7246" y="-518.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_A1_sub_1</text>
    </g>
    <!-- set_pathfollowing_X1_sub_1 -->
    <g id="node69" class="node"><title>set_pathfollowing_X1_sub_1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="7493" cy="-522" rx="114.085" ry="18"/>
    <text text-anchor="middle" x="7493" y="-518.3" font-family="Times,serif" font-size="14.00">set_pathfollowing_X1_sub_1</text>
    </g>
    <!-- PF2_LOWER_POS -->
    <g id="node70" class="node"><title>PF2_LOWER_POS</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="7707" cy="-522" rx="81.3646" ry="18"/>
    <text text-anchor="middle" x="7707" y="-518.3" font-family="Times,serif" font-size="14.00">PF2_LOWER_POS</text>
    </g>
    <!-- pathfollowing -->
    <g id="node101" class="node"><title>pathfollowing</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="8402" cy="-450" rx="59.1941" ry="18"/>
    <text text-anchor="middle" x="8402" y="-446.3" font-family="Times,serif" font-size="14.00">pathfollowing</text>
    </g>
    <!-- PF2_LOWER_POS&#45;&gt;pathfollowing -->
    <g id="edge62" class="edge"><title>PF2_LOWER_POS&#45;&gt;pathfollowing</title>
    <path fill="none" stroke="black" d="M7764.48,-509.264C7775.25,-507.313 7786.45,-505.455 7797,-504 7990.71,-477.288 8221.28,-461.463 8333.63,-454.77"/>
    <polygon fill="black" stroke="black" points="8334.03,-458.253 8343.8,-454.17 8333.62,-451.265 8334.03,-458.253"/>
    </g>
    <!-- update_t_ensures1 -->
    <g id="node75" class="node"><title>update_t_ensures1</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1396" cy="-162" rx="76.0649" ry="18"/>
    <text text-anchor="middle" x="1396" y="-158.3" font-family="Times,serif" font-size="14.00">update_t_ensures1</text>
    </g>
    <!-- update_t_ensures1_l0&#45;&gt;update_t_ensures1 -->
    <g id="edge48" class="edge"><title>update_t_ensures1_l0&#45;&gt;update_t_ensures1</title>
    <path fill="none" stroke="black" d="M1396,-215.697C1396,-207.983 1396,-198.712 1396,-190.112"/>
    <polygon fill="black" stroke="black" points="1399.5,-190.104 1396,-180.104 1392.5,-190.104 1399.5,-190.104"/>
    </g>
    <!-- set_compute_pre_vals_sub_4 -->
    <g id="node72" class="node"><title>set_compute_pre_vals_sub_4</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="9272" cy="-522" rx="115.06" ry="18"/>
    <text text-anchor="middle" x="9272" y="-518.3" font-family="Times,serif" font-size="14.00">set_compute_pre_vals_sub_4</text>
    </g>
    <!-- PF2_LOWER_ONE -->
    <g id="node73" class="node"><title>PF2_LOWER_ONE</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="7889" cy="-522" rx="83.2892" ry="18"/>
    <text text-anchor="middle" x="7889" y="-518.3" font-family="Times,serif" font-size="14.00">PF2_LOWER_ONE</text>
    </g>
    <!-- PF2_LOWER_ONE&#45;&gt;pathfollowing -->
    <g id="edge61" class="edge"><title>PF2_LOWER_ONE&#45;&gt;pathfollowing</title>
    <path fill="none" stroke="black" d="M7949.45,-509.45C7960.27,-507.525 7971.46,-505.628 7982,-504 8107.33,-484.652 8254.52,-467.307 8337.17,-458.056"/>
    <polygon fill="black" stroke="black" points="8337.61,-461.528 8347.16,-456.941 8336.84,-454.571 8337.61,-461.528"/>
    </g>
    <!-- set_pathfollowing_dx_sub_1 -->
    <g id="node74" class="node"><title>set_pathfollowing_dx_sub_1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="9517" cy="-522" rx="112.16" ry="18"/>
    <text text-anchor="middle" x="9517" y="-518.3" font-family="Times,serif" font-size="14.00">set_pathfollowing_dx_sub_1</text>
    </g>
    <!-- update_t_ensures1&#45;&gt;update_t -->
    <g id="edge23" class="edge"><title>update_t_ensures1&#45;&gt;update_t</title>
    <path fill="none" stroke="black" d="M1429.85,-145.811C1454.96,-134.544 1489.17,-119.193 1515,-107.603"/>
    <polygon fill="black" stroke="black" points="1516.76,-110.648 1524.45,-103.361 1513.9,-104.262 1516.76,-110.648"/>
    </g>
    <!-- compute -->
    <g id="node76" class="node"><title>compute</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="9731" cy="-450" rx="41.394" ry="18"/>
    <text text-anchor="middle" x="9731" y="-446.3" font-family="Times,serif" font-size="14.00">compute</text>
    </g>
    <!-- PF2_myoptimality -->
    <g id="node77" class="node"><title>PF2_myoptimality</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="8068" cy="-522" rx="77.0154" ry="18"/>
    <text text-anchor="middle" x="8068" y="-518.3" font-family="Times,serif" font-size="14.00">PF2_myoptimality</text>
    </g>
    <!-- PF2_myoptimality&#45;&gt;pathfollowing -->
    <g id="edge63" class="edge"><title>PF2_myoptimality&#45;&gt;pathfollowing</title>
    <path fill="none" stroke="black" d="M8123.53,-509.362C8184.76,-496.528 8282.8,-475.981 8344.73,-463.003"/>
    <polygon fill="black" stroke="black" points="8345.65,-466.386 8354.72,-460.909 8344.22,-459.534 8345.65,-466.386"/>
    </g>
    <!-- set_cholesky_PF2_A_sub_1 -->
    <g id="node78" class="node"><title>set_cholesky_PF2_A_sub_1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="9943" cy="-522" rx="110.235" ry="18"/>
    <text text-anchor="middle" x="9943" y="-518.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_A_sub_1</text>
    </g>
    <!-- set_pathfollowing_X1 -->
    <g id="node79" class="node"><title>set_pathfollowing_X1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="2980" cy="-378" rx="89.0632" ry="18"/>
    <text text-anchor="middle" x="2980" y="-374.3" font-family="Times,serif" font-size="14.00">set_pathfollowing_X1</text>
    </g>
    <!-- set_compute_pre_hess_sub_3 -->
    <g id="node80" class="node"><title>set_compute_pre_hess_sub_3</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="10188" cy="-522" rx="116.01" ry="18"/>
    <text text-anchor="middle" x="10188" y="-518.3" font-family="Times,serif" font-size="14.00">set_compute_pre_hess_sub_3</text>
    </g>
    <!-- update_t_ensures2 -->
    <g id="node81" class="node"><title>update_t_ensures2</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="1708" cy="-162" rx="76.0649" ry="18"/>
    <text text-anchor="middle" x="1708" y="-158.3" font-family="Times,serif" font-size="14.00">update_t_ensures2</text>
    </g>
    <!-- update_t_ensures2&#45;&gt;update_t -->
    <g id="edge24" class="edge"><title>update_t_ensures2&#45;&gt;update_t</title>
    <path fill="none" stroke="black" d="M1674.15,-145.811C1649.04,-134.544 1614.83,-119.193 1589,-107.603"/>
    <polygon fill="black" stroke="black" points="1590.1,-104.262 1579.55,-103.361 1587.24,-110.648 1590.1,-104.262"/>
    </g>
    <!-- PF2_pathfollowing_ensures2 -->
    <g id="node82" class="node"><title>PF2_pathfollowing_ensures2</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="8277" cy="-522" rx="113.61" ry="18"/>
    <text text-anchor="middle" x="8277" y="-518.3" font-family="Times,serif" font-size="14.00">PF2_pathfollowing_ensures2</text>
    </g>
    <!-- PF2_pathfollowing_ensures2&#45;&gt;pathfollowing -->
    <g id="edge66" class="edge"><title>PF2_pathfollowing_ensures2&#45;&gt;pathfollowing</title>
    <path fill="none" stroke="black" d="M8306.31,-504.588C8324.17,-494.587 8347.12,-481.732 8366.07,-471.121"/>
    <polygon fill="black" stroke="black" points="8368,-474.053 8375.01,-466.114 8364.58,-467.946 8368,-474.053"/>
    </g>
    <!-- set_compute_pre_vals_sub_0 -->
    <g id="node83" class="node"><title>set_compute_pre_vals_sub_0</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="10437" cy="-522" rx="115.06" ry="18"/>
    <text text-anchor="middle" x="10437" y="-518.3" font-family="Times,serif" font-size="14.00">set_compute_pre_vals_sub_0</text>
    </g>
    <!-- set_cholesky_PF2_A1_sub_2 -->
    <g id="node84" class="node"><title>set_cholesky_PF2_A1_sub_2</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="10685" cy="-522" rx="115.06" ry="18"/>
    <text text-anchor="middle" x="10685" y="-518.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_A1_sub_2</text>
    </g>
    <!-- PF2_pathfollowing_invariant4 -->
    <g id="node85" class="node"><title>PF2_pathfollowing_invariant4</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="8527" cy="-522" rx="117.935" ry="18"/>
    <text text-anchor="middle" x="8527" y="-518.3" font-family="Times,serif" font-size="14.00">PF2_pathfollowing_invariant4</text>
    </g>
    <!-- PF2_pathfollowing_invariant4&#45;&gt;pathfollowing -->
    <g id="edge67" class="edge"><title>PF2_pathfollowing_invariant4&#45;&gt;pathfollowing</title>
    <path fill="none" stroke="black" d="M8497.38,-504.411C8479.63,-494.474 8456.95,-481.769 8438.15,-471.244"/>
    <polygon fill="black" stroke="black" points="8439.71,-468.106 8429.27,-466.274 8436.29,-474.214 8439.71,-468.106"/>
    </g>
    <!-- set_compute_dt_pre_nc_sub_0 -->
    <g id="node88" class="node"><title>set_compute_dt_pre_nc_sub_0</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="10938" cy="-522" rx="120.359" ry="18"/>
    <text text-anchor="middle" x="10938" y="-518.3" font-family="Times,serif" font-size="14.00">set_compute_dt_pre_nc_sub_0</text>
    </g>
    <!-- PF2_acc_gt -->
    <g id="node89" class="node"><title>PF2_acc_gt</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="8715" cy="-522" rx="51.4931" ry="18"/>
    <text text-anchor="middle" x="8715" y="-518.3" font-family="Times,serif" font-size="14.00">PF2_acc_gt</text>
    </g>
    <!-- PF2_acc_gt&#45;&gt;pathfollowing -->
    <g id="edge65" class="edge"><title>PF2_acc_gt&#45;&gt;pathfollowing</title>
    <path fill="none" stroke="black" d="M8676.7,-509.92C8669.2,-507.864 8661.37,-505.8 8654,-504 8588.24,-487.94 8512.12,-472.338 8460.89,-462.27"/>
    <polygon fill="black" stroke="black" points="8461.48,-458.817 8450.99,-460.331 8460.13,-465.687 8461.48,-458.817"/>
    </g>
    <!-- PF2_pathfollowing_pre_update -->
    <g id="node90" class="node"><title>PF2_pathfollowing_pre_update</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="8907" cy="-522" rx="122.284" ry="18"/>
    <text text-anchor="middle" x="8907" y="-518.3" font-family="Times,serif" font-size="14.00">PF2_pathfollowing_pre_update</text>
    </g>
    <!-- PF2_pathfollowing_pre_update&#45;&gt;pathfollowing -->
    <g id="edge68" class="edge"><title>PF2_pathfollowing_pre_update&#45;&gt;pathfollowing</title>
    <path fill="none" stroke="black" d="M8821.33,-509.125C8720.27,-495.116 8554.65,-472.159 8464.77,-459.701"/>
    <polygon fill="black" stroke="black" points="8465.12,-456.215 8454.73,-458.309 8464.15,-463.149 8465.12,-456.215"/>
    </g>
    <!-- set_cholesky_PF2_A_sub_2 -->
    <g id="node91" class="node"><title>set_cholesky_PF2_A_sub_2</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="11187" cy="-522" rx="110.235" ry="18"/>
    <text text-anchor="middle" x="11187" y="-518.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_A_sub_2</text>
    </g>
    <!-- set_cholesky_PF2_b_sub_0 -->
    <g id="node92" class="node"><title>set_cholesky_PF2_b_sub_0</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="11424" cy="-522" rx="108.31" ry="18"/>
    <text text-anchor="middle" x="11424" y="-518.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_b_sub_0</text>
    </g>
    <!-- set_cholesky_PF2_b1_sub_0 -->
    <g id="node93" class="node"><title>set_cholesky_PF2_b1_sub_0</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="11664" cy="-522" rx="113.135" ry="18"/>
    <text text-anchor="middle" x="11664" y="-518.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_b1_sub_0</text>
    </g>
    <!-- set_compute_pre_vals_sub_1 -->
    <g id="node94" class="node"><title>set_compute_pre_vals_sub_1</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="11910" cy="-522" rx="115.06" ry="18"/>
    <text text-anchor="middle" x="11910" y="-518.3" font-family="Times,serif" font-size="14.00">set_compute_pre_vals_sub_1</text>
    </g>
    <!-- set_cholesky_PF2_A1_sub_0 -->
    <g id="node95" class="node"><title>set_cholesky_PF2_A1_sub_0</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="12158" cy="-522" rx="115.06" ry="18"/>
    <text text-anchor="middle" x="12158" y="-518.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_A1_sub_0</text>
    </g>
    <!-- set_cholesky_PF2_A1_sub_3 -->
    <g id="node96" class="node"><title>set_cholesky_PF2_A1_sub_3</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="12406" cy="-522" rx="115.06" ry="18"/>
    <text text-anchor="middle" x="12406" y="-518.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_A1_sub_3</text>
    </g>
    <!-- mat_eq_def_2_1&#45;&gt;set_pathfollowing_X -->
    <g id="edge5" class="edge"><title>mat_eq_def_2_1&#45;&gt;set_pathfollowing_X</title>
    <path fill="none" stroke="black" d="M2474.97,-432.765C2462.35,-423.467 2446.32,-411.66 2432.51,-401.481"/>
    <polygon fill="black" stroke="black" points="2434.37,-398.504 2424.24,-395.39 2430.22,-404.14 2434.37,-398.504"/>
    </g>
    <!-- mat_eq_def_2_1&#45;&gt;set_pathfollowing_dx -->
    <g id="edge37" class="edge"><title>mat_eq_def_2_1&#45;&gt;set_pathfollowing_dx</title>
    <path fill="none" stroke="black" d="M2519.03,-432.765C2531.56,-423.533 2547.45,-411.83 2561.19,-401.701"/>
    <polygon fill="black" stroke="black" points="2563.45,-404.383 2569.43,-395.633 2559.3,-398.748 2563.45,-404.383"/>
    </g>
    <!-- mat_eq_def_2_1&#45;&gt;set_cholesky_PF2_b1 -->
    <g id="edge40" class="edge"><title>mat_eq_def_2_1&#45;&gt;set_cholesky_PF2_b1</title>
    <path fill="none" stroke="black" d="M2546.18,-437.046C2594.4,-425.325 2668.16,-407.398 2720.94,-394.569"/>
    <polygon fill="black" stroke="black" points="2721.99,-397.918 2730.88,-392.155 2720.33,-391.116 2721.99,-397.918"/>
    </g>
    <!-- mat_eq_def_2_1&#45;&gt;set_pathfollowing_X1 -->
    <g id="edge50" class="edge"><title>mat_eq_def_2_1&#45;&gt;set_pathfollowing_X1</title>
    <path fill="none" stroke="black" d="M2558.28,-441.175C2634.15,-431.34 2767.27,-413.608 2881,-396 2888.9,-394.776 2897.15,-393.446 2905.37,-392.086"/>
    <polygon fill="black" stroke="black" points="2906.06,-395.518 2915.35,-390.417 2904.91,-388.614 2906.06,-395.518"/>
    </g>
    <!-- mat_eq_def_2_1&#45;&gt;compute_dt -->
    <g id="edge51" class="edge"><title>mat_eq_def_2_1&#45;&gt;compute_dt</title>
    <path fill="none" stroke="black" d="M2427.73,-447.197C2235.13,-441.873 1695.87,-424.763 1521,-396 1516.48,-395.257 1511.82,-394.307 1507.19,-393.235"/>
    <polygon fill="black" stroke="black" points="1507.68,-389.752 1497.13,-390.731 1505.99,-396.545 1507.68,-389.752"/>
    </g>
    <!-- set_compute_pre_grad -->
    <g id="node100" class="node"><title>set_compute_pre_grad</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="2024" cy="-378" rx="90.4879" ry="18"/>
    <text text-anchor="middle" x="2024" y="-374.3" font-family="Times,serif" font-size="14.00">set_compute_pre_grad</text>
    </g>
    <!-- mat_eq_def_2_1&#45;&gt;set_compute_pre_grad -->
    <g id="edge60" class="edge"><title>mat_eq_def_2_1&#45;&gt;set_compute_pre_grad</title>
    <path fill="none" stroke="black" d="M2436.19,-440.878C2362.3,-430.888 2233.86,-413.14 2124,-396 2116.08,-394.765 2107.82,-393.432 2099.59,-392.074"/>
    <polygon fill="black" stroke="black" points="2100.02,-388.599 2089.58,-390.412 2098.87,-395.504 2100.02,-388.599"/>
    </g>
    <!-- set_cholesky_PF2_b -->
    <g id="node104" class="node"><title>set_cholesky_PF2_b</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="2216" cy="-378" rx="83.2892" ry="18"/>
    <text text-anchor="middle" x="2216" y="-374.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_b</text>
    </g>
    <!-- mat_eq_def_2_1&#45;&gt;set_cholesky_PF2_b -->
    <g id="edge69" class="edge"><title>mat_eq_def_2_1&#45;&gt;set_cholesky_PF2_b</title>
    <path fill="none" stroke="black" d="M2448.37,-436.887C2401.25,-425.148 2329.57,-407.291 2278.29,-394.517"/>
    <polygon fill="black" stroke="black" points="2278.87,-391.054 2268.32,-392.033 2277.18,-397.847 2278.87,-391.054"/>
    </g>
    <!-- PF2_analytic_center -->
    <g id="node98" class="node"><title>PF2_analytic_center</title>
    <ellipse fill="blue" stroke="darkblue" stroke-width="2" cx="9731" cy="-522" rx="83.2892" ry="18"/>
    <text text-anchor="middle" x="9731" y="-518.3" font-family="Times,serif" font-size="14.00">PF2_analytic_center</text>
    </g>
    <!-- PF2_analytic_center&#45;&gt;compute -->
    <g id="edge49" class="edge"><title>PF2_analytic_center&#45;&gt;compute</title>
    <path fill="none" stroke="black" d="M9731,-503.697C9731,-495.983 9731,-486.712 9731,-478.112"/>
    <polygon fill="black" stroke="black" points="9734.5,-478.104 9731,-468.104 9727.5,-478.104 9734.5,-478.104"/>
    </g>
    <!-- PF2_ncca -->
    <g id="node99" class="node"><title>PF2_ncca</title>
    <ellipse fill="red" stroke="#bc9481" stroke-width="2" cx="9093" cy="-522" rx="45.244" ry="18"/>
    <text text-anchor="middle" x="9093" y="-518.3" font-family="Times,serif" font-size="14.00">PF2_ncca</text>
    </g>
    <!-- PF2_ncca&#45;&gt;pathfollowing -->
    <g id="edge64" class="edge"><title>PF2_ncca&#45;&gt;pathfollowing</title>
    <path fill="none" stroke="black" d="M9060.14,-509.574C9052.92,-507.422 9045.26,-505.407 9038,-504 8834.74,-464.602 8589.36,-454.481 8471.64,-451.888"/>
    <polygon fill="black" stroke="black" points="8471.4,-448.383 8461.33,-451.673 8471.26,-455.381 8471.4,-448.383"/>
    </g>
    <!-- set_cholesky_PF2_A_sub_3 -->
    <g id="node102" class="node"><title>set_cholesky_PF2_A_sub_3</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="12650" cy="-522" rx="110.235" ry="18"/>
    <text text-anchor="middle" x="12650" y="-518.3" font-family="Times,serif" font-size="14.00">set_cholesky_PF2_A_sub_3</text>
    </g>
    <!-- set_compute_pre_vals_sub_2 -->
    <g id="node103" class="node"><title>set_compute_pre_vals_sub_2</title>
    <ellipse fill="red" stroke="#2f521b" stroke-width="2" cx="12894" cy="-522" rx="115.06" ry="18"/>
    <text text-anchor="middle" x="12894" y="-518.3" font-family="Times,serif" font-size="14.00">set_compute_pre_vals_sub_2</text>
    </g>
    </g>
    </svg>
    </hierarchy_svg>
    <function name="pathfollowing">
        <contract >
            <require >
                <code>
                    <verbatim>
                        <![CDATA[acc(LOGIC_A, LOGIC_b, LOGIC_c, (0.0), MatVar(((double*)pathfollowing_X), (2), (1)), (0.1111111111111111))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="n">acc</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">LOGIC_c</span><span class="p">,</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">),</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mf">0.1111111111111111</span><span class="p">))</span>
</pre></div>

                    </pp>
                </code>
            </require>
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[mat_gt(LOGIC_b, mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="n">mat_gt</span><span class="p">(</span><span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">mat_mult</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((((dot(MatVar(((double*)pathfollowing_X), (2), (1)), LOGIC_c))-(sol(LOGIC_A, LOGIC_b, LOGIC_c))))<((1e-10)))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((((</span><span class="n">dot</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="n">LOGIC_c</span><span class="p">))</span><span class="o">-</span><span class="p">(</span><span class="n">sol</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">LOGIC_c</span><span class="p">))))</span><span class="o">&lt;</span><span class="p">((</span><span class="mf">1e-10</span><span class="p">)))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>PF2_LOWER_ONE</dep>
                <dep>PF2_LOWER_POS</dep>
                <dep>PF2_myoptimality</dep>
                <dep>PF2_ncca</dep>
                <dep>PF2_acc_gt</dep>
                <dep>PF2_pathfollowing_ensures2</dep>
                <dep>PF2_pathfollowing_invariant4</dep>
                <dep>PF2_pathfollowing_pre_update</dep>
            </hints>
            <assigns >
                <assign>compute_dt_nc</assign>
                <assign>*(cholesky_PF2_A+(0..4))</assign>
                <assign>cholesky_PF2_sumcho</assign>
                <assign>*(pathfollowing_X+(0..2))</assign>
                <assign>*(cholesky_PF2_D+(0..4))</assign>
                <assign>cholesky_PF2_sumUT</assign>
                <assign>*(compute_dt_pre_nc+(0..1))</assign>
                <assign>pathfollowing_t</assign>
                <assign>*(compute_pre_grad+(0..2))</assign>
                <assign>cholesky_PF2_i1</assign>
                <assign>*(cholesky_PF2_L+(0..4))</assign>
                <assign>*(compute_pre_hess+(0..4))</assign>
                <assign>cholesky_PF2_i2</assign>
                <assign>*(cholesky_PF2_xUT+(0..2))</assign>
                <assign>pathfollowing_dt</assign>
                <assign>*(pathfollowing_dx+(0..2))</assign>
                <assign>*(cholesky_PF2_xLT+(0..2))</assign>
                <assign>pathfollowing_i0</assign>
                <assign>*(compute_pre_vals+(0..5))</assign>
                <assign>cholesky_PF2_sumLT</assign>
                <assign>cholesky_PF2_i0</assign>
                <assign>*(cholesky_PF2_b+(0..2))</assign>
                <assign>*(cholesky_PF2_z+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ requires acc(LOGIC_A, LOGIC_b, LOGIC_c, (0.0), MatVar(((double*)pathfollowing_X), (2), (1)), (0.1111111111111111));
  @ ensures mat_gt(LOGIC_b, mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))));
  @ ensures ((((dot(MatVar(((double*)pathfollowing_X), (2), (1)), LOGIC_c))-(sol(LOGIC_A, LOGIC_b, LOGIC_c))))<((1e-10)));
  @ assigns compute_dt_nc, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumcho, *(pathfollowing_X+(0..2)), *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumUT, *(compute_dt_pre_nc+(0..1)), pathfollowing_t, *(compute_pre_grad+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), *(compute_pre_hess+(0..4)), cholesky_PF2_i2, *(cholesky_PF2_xUT+(0..2)), pathfollowing_dt, *(pathfollowing_dx+(0..2)), *(cholesky_PF2_xLT+(0..2)), pathfollowing_i0, *(compute_pre_vals+(0..5)), cholesky_PF2_sumLT, cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ requires acc(LOGIC_A, LOGIC_b, LOGIC_c, (0.0), MatVar(((double*)pathfollowing_X), (2), (1)), (0.1111111111111111));</span>
<span class="lineno">3 </span><span class="cm">  @ ensures mat_gt(LOGIC_b, mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))));</span>
<span class="lineno">4 </span><span class="cm">  @ ensures ((((dot(MatVar(((double*)pathfollowing_X), (2), (1)), LOGIC_c))-(sol(LOGIC_A, LOGIC_b, LOGIC_c))))&lt;((1e-10)));</span>
<span class="lineno">5 </span><span class="cm">  @ assigns compute_dt_nc, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumcho, *(pathfollowing_X+(0..2)), *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumUT, *(compute_dt_pre_nc+(0..1)), pathfollowing_t, *(compute_pre_grad+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), *(compute_pre_hess+(0..4)), cholesky_PF2_i2, *(cholesky_PF2_xUT+(0..2)), pathfollowing_dt, *(pathfollowing_dx+(0..2)), *(cholesky_PF2_xLT+(0..2)), pathfollowing_i0, *(compute_pre_vals+(0..5)), cholesky_PF2_sumLT, cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2));</span>
<span class="lineno">6 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void pathfollowing()
{
    pathfollowing_t = (0.06959389732475324);
    compute_pre();
    update_x();
    /*@
      @loop invariant (((((1))<=(pathfollowing_i0)))&&(((pathfollowing_i0)<=((222)))));
      @loop invariant ((pathfollowing_i0)>=((1)));
      @loop invariant ((pathfollowing_i0)<=((222)));
      @loop invariant acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.1111111111111111));
      @loop invariant ((pathfollowing_t)>(LOWER(pathfollowing_i0)));
      @ loop assigns compute_dt_nc, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumcho, *(pathfollowing_X+(0..2)), *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumUT, *(compute_dt_pre_nc+(0..1)), pathfollowing_t, *(compute_pre_grad+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), *(compute_pre_hess+(0..4)), cholesky_PF2_i2, *(cholesky_PF2_xUT+(0..2)), pathfollowing_dt, *(pathfollowing_dx+(0..2)), *(cholesky_PF2_xLT+(0..2)), pathfollowing_i0, *(compute_pre_vals+(0..5)), cholesky_PF2_sumLT, cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2));
    */
    for (pathfollowing_i0 = (1);pathfollowing_i0 < (222);pathfollowing_i0++)
    {
        compute_pre();
        update_t();
        update_x();
    }
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">pathfollowing</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">pathfollowing_t</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.06959389732475324</span><span class="p">);</span>
<span class="lineno"> 4 </span>    <span class="n">compute_pre</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="n">update_x</span><span class="p">();</span>
<span class="lineno"> 6 </span>    <span class="cm">/*@</span>
<span class="lineno"> 7 </span><span class="cm">      @loop invariant (((((1))&lt;=(pathfollowing_i0)))&amp;&amp;(((pathfollowing_i0)&lt;=((222)))));</span>
<span class="lineno"> 8 </span><span class="cm">      @loop invariant ((pathfollowing_i0)&gt;=((1)));</span>
<span class="lineno"> 9 </span><span class="cm">      @loop invariant ((pathfollowing_i0)&lt;=((222)));</span>
<span class="lineno">10 </span><span class="cm">      @loop invariant acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.1111111111111111));</span>
<span class="lineno">11 </span><span class="cm">      @loop invariant ((pathfollowing_t)&gt;(LOWER(pathfollowing_i0)));</span>
<span class="lineno">12 </span><span class="cm">      @ loop assigns compute_dt_nc, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumcho, *(pathfollowing_X+(0..2)), *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumUT, *(compute_dt_pre_nc+(0..1)), pathfollowing_t, *(compute_pre_grad+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), *(compute_pre_hess+(0..4)), cholesky_PF2_i2, *(cholesky_PF2_xUT+(0..2)), pathfollowing_dt, *(pathfollowing_dx+(0..2)), *(cholesky_PF2_xLT+(0..2)), pathfollowing_i0, *(compute_pre_vals+(0..5)), cholesky_PF2_sumLT, cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2));</span>
<span class="lineno">13 </span><span class="cm">    */</span>
<span class="lineno">14 </span>    <span class="k">for</span> <span class="p">(</span><span class="n">pathfollowing_i0</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="n">pathfollowing_i0</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">222</span><span class="p">);</span><span class="n">pathfollowing_i0</span><span class="o">++</span><span class="p">)</span>
<span class="lineno">15 </span>    <span class="p">{</span>
<span class="lineno">16 </span>        <span class="n">compute_pre</span><span class="p">();</span>
<span class="lineno">17 </span>        <span class="n">update_t</span><span class="p">();</span>
<span class="lineno">18 </span>        <span class="n">update_x</span><span class="p">();</span>
<span class="lineno">19 </span>    <span class="p">}</span>
<span class="lineno">20 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="compute_pre">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="n">hess</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)compute_pre_grad), (2), (1)))==(grad(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_grad</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="n">grad</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_pre_vals+(0..5))</assign>
                <assign>*(compute_pre_grad+(0..2))</assign>
                <assign>*(compute_pre_hess+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));
  @ ensures ((MatVar(((double*)compute_pre_grad), (2), (1)))==(grad(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));
  @ assigns *(compute_pre_vals+(0..5)), *(compute_pre_grad+(0..2)), *(compute_pre_hess+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));</span>
<span class="lineno">3 </span><span class="cm">  @ ensures ((MatVar(((double*)compute_pre_grad), (2), (1)))==(grad(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));</span>
<span class="lineno">4 </span><span class="cm">  @ assigns *(compute_pre_vals+(0..5)), *(compute_pre_grad+(0..2)), *(compute_pre_hess+(0..4));</span>
<span class="lineno">5 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void compute_pre()
{
    set_compute_pre_vals();
    set_compute_pre_grad();
    compute_pre_grad[(0)] = ((compute_pre_grad[(0)])-((((3.0))/(compute_pre_vals[(0)]))));
    compute_pre_grad[(1)] = ((compute_pre_grad[(1)])-((((-3.0))/(compute_pre_vals[(0)]))));
    compute_pre_grad[(0)] = ((compute_pre_grad[(0)])-(1/(compute_pre_vals[(1)])));
    compute_pre_grad[(1)] = ((compute_pre_grad[(1)])-(1/(compute_pre_vals[(1)])));
    compute_pre_grad[(0)] = ((compute_pre_grad[(0)])-((((-5.0))/(compute_pre_vals[(2)]))));
    compute_pre_grad[(1)] = ((compute_pre_grad[(1)])-((((-1.0))/(compute_pre_vals[(2)]))));
    compute_pre_grad[(0)] = ((compute_pre_grad[(0)])-((((-1.0))/(compute_pre_vals[(3)]))));
    compute_pre_grad[(1)] = ((compute_pre_grad[(1)])-((((2.0))/(compute_pre_vals[(3)]))));
    compute_pre_grad[(0)] = ((compute_pre_grad[(0)])-(1/(compute_pre_vals[(4)])));
    compute_pre_grad[(1)] = ((compute_pre_grad[(1)])-((((-6.0))/(compute_pre_vals[(4)]))));
    set_compute_pre_hess();
    compute_pre_hess[(0)] = ((compute_pre_hess[(0)])+((((9.0))/(((compute_pre_vals[(0)])*(compute_pre_vals[(0)]))))));
    compute_pre_hess[(2)] = ((compute_pre_hess[(2)])+((((-9.0))/(((compute_pre_vals[(0)])*(compute_pre_vals[(0)]))))));
    compute_pre_hess[(3)] = ((compute_pre_hess[(3)])+((((9.0))/(((compute_pre_vals[(0)])*(compute_pre_vals[(0)]))))));
    compute_pre_hess[(0)] = ((compute_pre_hess[(0)])+(1/(((compute_pre_vals[(1)])*(compute_pre_vals[(1)])))));
    compute_pre_hess[(2)] = ((compute_pre_hess[(2)])+(1/(((compute_pre_vals[(1)])*(compute_pre_vals[(1)])))));
    compute_pre_hess[(3)] = ((compute_pre_hess[(3)])+(1/(((compute_pre_vals[(1)])*(compute_pre_vals[(1)])))));
    compute_pre_hess[(0)] = ((compute_pre_hess[(0)])+((((25.0))/(((compute_pre_vals[(2)])*(compute_pre_vals[(2)]))))));
    compute_pre_hess[(2)] = ((compute_pre_hess[(2)])+((((5.0))/(((compute_pre_vals[(2)])*(compute_pre_vals[(2)]))))));
    compute_pre_hess[(3)] = ((compute_pre_hess[(3)])+(1/(((compute_pre_vals[(2)])*(compute_pre_vals[(2)])))));
    compute_pre_hess[(0)] = ((compute_pre_hess[(0)])+(1/(((compute_pre_vals[(3)])*(compute_pre_vals[(3)])))));
    compute_pre_hess[(2)] = ((compute_pre_hess[(2)])+((((-2.0))/(((compute_pre_vals[(3)])*(compute_pre_vals[(3)]))))));
    compute_pre_hess[(3)] = ((compute_pre_hess[(3)])+((((4.0))/(((compute_pre_vals[(3)])*(compute_pre_vals[(3)]))))));
    compute_pre_hess[(0)] = ((compute_pre_hess[(0)])+(1/(((compute_pre_vals[(4)])*(compute_pre_vals[(4)])))));
    compute_pre_hess[(2)] = ((compute_pre_hess[(2)])+((((-6.0))/(((compute_pre_vals[(4)])*(compute_pre_vals[(4)]))))));
    compute_pre_hess[(3)] = ((compute_pre_hess[(3)])+((((36.0))/(((compute_pre_vals[(4)])*(compute_pre_vals[(4)]))))));
    compute_pre_hess[(1)] = compute_pre_hess[(2)];
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">compute_pre</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">set_compute_pre_vals</span><span class="p">();</span>
<span class="lineno"> 4 </span>    <span class="n">set_compute_pre_grad</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">-</span><span class="p">((((</span><span class="mf">3.0</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]))));</span>
<span class="lineno"> 6 </span>    <span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])</span><span class="o">-</span><span class="p">((((</span><span class="o">-</span><span class="mf">3.0</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]))));</span>
<span class="lineno"> 7 </span>    <span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">-</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])));</span>
<span class="lineno"> 8 </span>    <span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])</span><span class="o">-</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])));</span>
<span class="lineno"> 9 </span>    <span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">-</span><span class="p">((((</span><span class="o">-</span><span class="mf">5.0</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]))));</span>
<span class="lineno">10 </span>    <span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])</span><span class="o">-</span><span class="p">((((</span><span class="o">-</span><span class="mf">1.0</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]))));</span>
<span class="lineno">11 </span>    <span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">-</span><span class="p">((((</span><span class="o">-</span><span class="mf">1.0</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]))));</span>
<span class="lineno">12 </span>    <span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])</span><span class="o">-</span><span class="p">((((</span><span class="mf">2.0</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]))));</span>
<span class="lineno">13 </span>    <span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">-</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">4</span><span class="p">)])));</span>
<span class="lineno">14 </span>    <span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])</span><span class="o">-</span><span class="p">((((</span><span class="o">-</span><span class="mf">6.0</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">4</span><span class="p">)]))));</span>
<span class="lineno">15 </span>    <span class="n">set_compute_pre_hess</span><span class="p">();</span>
<span class="lineno">16 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">+</span><span class="p">((((</span><span class="mf">9.0</span><span class="p">))</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]))))));</span>
<span class="lineno">17 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)])</span><span class="o">+</span><span class="p">((((</span><span class="o">-</span><span class="mf">9.0</span><span class="p">))</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]))))));</span>
<span class="lineno">18 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)])</span><span class="o">+</span><span class="p">((((</span><span class="mf">9.0</span><span class="p">))</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]))))));</span>
<span class="lineno">19 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])))));</span>
<span class="lineno">20 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)])</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])))));</span>
<span class="lineno">21 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)])</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])))));</span>
<span class="lineno">22 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">+</span><span class="p">((((</span><span class="mf">25.0</span><span class="p">))</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">2</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]))))));</span>
<span class="lineno">23 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)])</span><span class="o">+</span><span class="p">((((</span><span class="mf">5.0</span><span class="p">))</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">2</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]))))));</span>
<span class="lineno">24 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)])</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">2</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">2</span><span class="p">)])))));</span>
<span class="lineno">25 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">3</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">3</span><span class="p">)])))));</span>
<span class="lineno">26 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)])</span><span class="o">+</span><span class="p">((((</span><span class="o">-</span><span class="mf">2.0</span><span class="p">))</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">3</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]))))));</span>
<span class="lineno">27 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)])</span><span class="o">+</span><span class="p">((((</span><span class="mf">4.0</span><span class="p">))</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">3</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]))))));</span>
<span class="lineno">28 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">4</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">4</span><span class="p">)])))));</span>
<span class="lineno">29 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)])</span><span class="o">+</span><span class="p">((((</span><span class="o">-</span><span class="mf">6.0</span><span class="p">))</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">4</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">4</span><span class="p">)]))))));</span>
<span class="lineno">30 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)])</span><span class="o">+</span><span class="p">((((</span><span class="mf">36.0</span><span class="p">))</span><span class="o">/</span><span class="p">(((</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">4</span><span class="p">)])</span><span class="o">*</span><span class="p">(</span><span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">4</span><span class="p">)]))))));</span>
<span class="lineno">31 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)];</span>
<span class="lineno">32 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_vals">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)compute_pre_vals), (5), (1)))==(\old(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_vals</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_sub</span><span class="p">(</span><span class="n">mat_mult</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))),</span> <span class="n">LOGIC_b</span><span class="p">))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>mat_eq_def_5_1</dep>
            </hints>
            <assigns >
                <assign>*(compute_pre_vals+(0..5))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)compute_pre_vals), (5), (1)))==(\old(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b))));
  @ assigns *(compute_pre_vals+(0..5));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)compute_pre_vals), (5), (1)))==(\old(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_vals+(0..5));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_vals()
{
    set_compute_pre_vals_sub_0();
    set_compute_pre_vals_sub_1();
    set_compute_pre_vals_sub_2();
    set_compute_pre_vals_sub_3();
    set_compute_pre_vals_sub_4();
    //@assert (((getM(MatVar(((double*)compute_pre_vals), (5), (1))))==((5))));
    //@assert (((getN(MatVar(((double*)compute_pre_vals), (5), (1))))==((1))));
    //@assert (((getM(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre)))==((5))));
    //@assert (((getN(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre)))==((1))));
    //@assert (((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (4), (0)))==(mat_get(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre), (4), (0)))));
    //@assert (((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (3), (0)))==(mat_get(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre), (3), (0)))));
    //@assert (((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (2), (0)))==(mat_get(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre), (2), (0)))));
    //@assert (((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (1), (0)))==(mat_get(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre), (1), (0)))));
    //@assert (((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (0), (0)))==(mat_get(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre), (0), (0)))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_vals</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">set_compute_pre_vals_sub_0</span><span class="p">();</span>
<span class="lineno"> 4 </span>    <span class="n">set_compute_pre_vals_sub_1</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="n">set_compute_pre_vals_sub_2</span><span class="p">();</span>
<span class="lineno"> 6 </span>    <span class="n">set_compute_pre_vals_sub_3</span><span class="p">();</span>
<span class="lineno"> 7 </span>    <span class="n">set_compute_pre_vals_sub_4</span><span class="p">();</span>
<span class="lineno"> 8 </span>    <span class="c1">//@assert (((getM(MatVar(((double*)compute_pre_vals), (5), (1))))==((5))));</span>
<span class="lineno"> 9 </span>    <span class="c1">//@assert (((getN(MatVar(((double*)compute_pre_vals), (5), (1))))==((1))));</span>
<span class="lineno">10 </span>    <span class="c1">//@assert (((getM(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre)))==((5))));</span>
<span class="lineno">11 </span>    <span class="c1">//@assert (((getN(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre)))==((1))));</span>
<span class="lineno">12 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (4), (0)))==(mat_get(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre), (4), (0)))));</span>
<span class="lineno">13 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (3), (0)))==(mat_get(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre), (3), (0)))));</span>
<span class="lineno">14 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (2), (0)))==(mat_get(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre), (2), (0)))));</span>
<span class="lineno">15 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (1), (0)))==(mat_get(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre), (1), (0)))));</span>
<span class="lineno">16 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (0), (0)))==(mat_get(\at(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), Pre), (0), (0)))));</span>
<span class="lineno">17 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_vals_sub_0">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (0), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (0), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_vals</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">mat_sub</span><span class="p">(</span><span class="n">mat_mult</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))),</span> <span class="n">LOGIC_b</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_pre_vals+(0..5))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (0), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (0), (0)))));
  @ assigns *(compute_pre_vals+(0..5));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (0), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (0), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_vals+(0..5));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_vals_sub_0()
{
    compute_pre_vals[(0)] = (((((((3.0))*(pathfollowing_X[(0)])))+((((-3.0))*(pathfollowing_X[(1)])))))-((3.0)));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_vals_sub_0</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(((((((</span><span class="mf">3.0</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])))</span><span class="o">+</span><span class="p">((((</span><span class="o">-</span><span class="mf">3.0</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])))))</span><span class="o">-</span><span class="p">((</span><span class="mf">3.0</span><span class="p">)));</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_vals_sub_1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (1), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (1), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_vals</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">mat_sub</span><span class="p">(</span><span class="n">mat_mult</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))),</span> <span class="n">LOGIC_b</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_pre_vals+(0..5))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (1), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (1), (0)))));
  @ assigns *(compute_pre_vals+(0..5));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (1), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (1), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_vals+(0..5));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_vals_sub_1()
{
    compute_pre_vals[(1)] = ((((pathfollowing_X[(0)])+(pathfollowing_X[(1)])))-((2.0)));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_vals_sub_1</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((((</span><span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">+</span><span class="p">(</span><span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])))</span><span class="o">-</span><span class="p">((</span><span class="mf">2.0</span><span class="p">)));</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_vals_sub_2">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (2), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (2), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_vals</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">mat_sub</span><span class="p">(</span><span class="n">mat_mult</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))),</span> <span class="n">LOGIC_b</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_pre_vals+(0..5))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (2), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (2), (0)))));
  @ assigns *(compute_pre_vals+(0..5));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (2), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (2), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_vals+(0..5));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_vals_sub_2()
{
    compute_pre_vals[(2)] = (((((((-5.0))*(pathfollowing_X[(0)])))+((((-1.0))*(pathfollowing_X[(1)])))))-((5.0)));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_vals_sub_2</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(((((((</span><span class="o">-</span><span class="mf">5.0</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])))</span><span class="o">+</span><span class="p">((((</span><span class="o">-</span><span class="mf">1.0</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])))))</span><span class="o">-</span><span class="p">((</span><span class="mf">5.0</span><span class="p">)));</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_vals_sub_3">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (3), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (3), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_vals</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">mat_sub</span><span class="p">(</span><span class="n">mat_mult</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))),</span> <span class="n">LOGIC_b</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_pre_vals+(0..5))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (3), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (3), (0)))));
  @ assigns *(compute_pre_vals+(0..5));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (3), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (3), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_vals+(0..5));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_vals_sub_3()
{
    compute_pre_vals[(3)] = (((((((-1.0))*(pathfollowing_X[(0)])))+((((2.0))*(pathfollowing_X[(1)])))))-((2.0)));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_vals_sub_3</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(((((((</span><span class="o">-</span><span class="mf">1.0</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])))</span><span class="o">+</span><span class="p">((((</span><span class="mf">2.0</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])))))</span><span class="o">-</span><span class="p">((</span><span class="mf">2.0</span><span class="p">)));</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_vals_sub_4">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (4), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (4), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_vals</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">mat_sub</span><span class="p">(</span><span class="n">mat_mult</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))),</span> <span class="n">LOGIC_b</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_pre_vals+(0..5))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (4), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (4), (0)))));
  @ assigns *(compute_pre_vals+(0..5));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)compute_pre_vals), (5), (1)), (4), (0)))==(\old(mat_get(mat_sub(mat_mult(LOGIC_A, MatVar(((double*)pathfollowing_X), (2), (1))), LOGIC_b), (4), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_vals+(0..5));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_vals_sub_4()
{
    compute_pre_vals[(4)] = ((((pathfollowing_X[(0)])+((((-6.0))*(pathfollowing_X[(1)])))))-((4.0)));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_vals_sub_4</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_pre_vals</span><span class="p">[(</span><span class="mi">4</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((((</span><span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">+</span><span class="p">((((</span><span class="o">-</span><span class="mf">6.0</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])))))</span><span class="o">-</span><span class="p">((</span><span class="mf">4.0</span><span class="p">)));</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_grad">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)compute_pre_grad), (2), (1)))==(\old(unit((0.0), (2), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_grad</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">unit</span><span class="p">((</span><span class="mf">0.0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>mat_eq_def_2_1</dep>
            </hints>
            <assigns >
                <assign>*(compute_pre_grad+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)compute_pre_grad), (2), (1)))==(\old(unit((0.0), (2), (1)))));
  @ assigns *(compute_pre_grad+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)compute_pre_grad), (2), (1)))==(\old(unit((0.0), (2), (1)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_grad+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_grad()
{
    set_compute_pre_grad_sub_0();
    set_compute_pre_grad_sub_1();
    //@assert (((getM(MatVar(((double*)compute_pre_grad), (2), (1))))==((2))));
    //@assert (((getN(MatVar(((double*)compute_pre_grad), (2), (1))))==((1))));
    //@assert (((getM(\at(unit((0.0), (2), (1)), Pre)))==((2))));
    //@assert (((getN(\at(unit((0.0), (2), (1)), Pre)))==((1))));
    //@assert (((mat_get(MatVar(((double*)compute_pre_grad), (2), (1)), (1), (0)))==(mat_get(\at(unit((0.0), (2), (1)), Pre), (1), (0)))));
    //@assert (((mat_get(MatVar(((double*)compute_pre_grad), (2), (1)), (0), (0)))==(mat_get(\at(unit((0.0), (2), (1)), Pre), (0), (0)))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_grad</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">set_compute_pre_grad_sub_0</span><span class="p">();</span>
<span class="lineno"> 4 </span>    <span class="n">set_compute_pre_grad_sub_1</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="c1">//@assert (((getM(MatVar(((double*)compute_pre_grad), (2), (1))))==((2))));</span>
<span class="lineno"> 6 </span>    <span class="c1">//@assert (((getN(MatVar(((double*)compute_pre_grad), (2), (1))))==((1))));</span>
<span class="lineno"> 7 </span>    <span class="c1">//@assert (((getM(\at(unit((0.0), (2), (1)), Pre)))==((2))));</span>
<span class="lineno"> 8 </span>    <span class="c1">//@assert (((getN(\at(unit((0.0), (2), (1)), Pre)))==((1))));</span>
<span class="lineno"> 9 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)compute_pre_grad), (2), (1)), (1), (0)))==(mat_get(\at(unit((0.0), (2), (1)), Pre), (1), (0)))));</span>
<span class="lineno">10 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)compute_pre_grad), (2), (1)), (0), (0)))==(mat_get(\at(unit((0.0), (2), (1)), Pre), (0), (0)))));</span>
<span class="lineno">11 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_grad_sub_0">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_pre_grad), (2), (1)), (0), (0)))==(\old(mat_get(unit((0.0), (2), (1)), (0), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_grad</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">unit</span><span class="p">((</span><span class="mf">0.0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_pre_grad+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)compute_pre_grad), (2), (1)), (0), (0)))==(\old(mat_get(unit((0.0), (2), (1)), (0), (0)))));
  @ assigns *(compute_pre_grad+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)compute_pre_grad), (2), (1)), (0), (0)))==(\old(mat_get(unit((0.0), (2), (1)), (0), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_grad+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_grad_sub_0()
{
    compute_pre_grad[(0)] = (0.0);
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_grad_sub_0</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_grad_sub_1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_pre_grad), (2), (1)), (1), (0)))==(\old(mat_get(unit((0.0), (2), (1)), (1), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_grad</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">unit</span><span class="p">((</span><span class="mf">0.0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_pre_grad+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)compute_pre_grad), (2), (1)), (1), (0)))==(\old(mat_get(unit((0.0), (2), (1)), (1), (0)))));
  @ assigns *(compute_pre_grad+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)compute_pre_grad), (2), (1)), (1), (0)))==(\old(mat_get(unit((0.0), (2), (1)), (1), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_grad+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_grad_sub_1()
{
    compute_pre_grad[(1)] = (0.0);
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_grad_sub_1</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_hess">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)compute_pre_hess), (2), (2)))==(\old(unit((0.0), (2), (2)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">unit</span><span class="p">((</span><span class="mf">0.0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>mat_eq_def_2_2</dep>
            </hints>
            <assigns >
                <assign>*(compute_pre_hess+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)compute_pre_hess), (2), (2)))==(\old(unit((0.0), (2), (2)))));
  @ assigns *(compute_pre_hess+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)compute_pre_hess), (2), (2)))==(\old(unit((0.0), (2), (2)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_hess+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_hess()
{
    set_compute_pre_hess_sub_0();
    set_compute_pre_hess_sub_1();
    set_compute_pre_hess_sub_2();
    set_compute_pre_hess_sub_3();
    //@assert (((getM(MatVar(((double*)compute_pre_hess), (2), (2))))==((2))));
    //@assert (((getN(MatVar(((double*)compute_pre_hess), (2), (2))))==((2))));
    //@assert (((getM(\at(unit((0.0), (2), (2)), Pre)))==((2))));
    //@assert (((getN(\at(unit((0.0), (2), (2)), Pre)))==((2))));
    //@assert (((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (1)))==(mat_get(\at(unit((0.0), (2), (2)), Pre), (1), (1)))));
    //@assert (((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (0)))==(mat_get(\at(unit((0.0), (2), (2)), Pre), (1), (0)))));
    //@assert (((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (1)))==(mat_get(\at(unit((0.0), (2), (2)), Pre), (0), (1)))));
    //@assert (((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (0)))==(mat_get(\at(unit((0.0), (2), (2)), Pre), (0), (0)))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_hess</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">set_compute_pre_hess_sub_0</span><span class="p">();</span>
<span class="lineno"> 4 </span>    <span class="n">set_compute_pre_hess_sub_1</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="n">set_compute_pre_hess_sub_2</span><span class="p">();</span>
<span class="lineno"> 6 </span>    <span class="n">set_compute_pre_hess_sub_3</span><span class="p">();</span>
<span class="lineno"> 7 </span>    <span class="c1">//@assert (((getM(MatVar(((double*)compute_pre_hess), (2), (2))))==((2))));</span>
<span class="lineno"> 8 </span>    <span class="c1">//@assert (((getN(MatVar(((double*)compute_pre_hess), (2), (2))))==((2))));</span>
<span class="lineno"> 9 </span>    <span class="c1">//@assert (((getM(\at(unit((0.0), (2), (2)), Pre)))==((2))));</span>
<span class="lineno">10 </span>    <span class="c1">//@assert (((getN(\at(unit((0.0), (2), (2)), Pre)))==((2))));</span>
<span class="lineno">11 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (1)))==(mat_get(\at(unit((0.0), (2), (2)), Pre), (1), (1)))));</span>
<span class="lineno">12 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (0)))==(mat_get(\at(unit((0.0), (2), (2)), Pre), (1), (0)))));</span>
<span class="lineno">13 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (1)))==(mat_get(\at(unit((0.0), (2), (2)), Pre), (0), (1)))));</span>
<span class="lineno">14 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (0)))==(mat_get(\at(unit((0.0), (2), (2)), Pre), (0), (0)))));</span>
<span class="lineno">15 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_hess_sub_0">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (0)))==(\old(mat_get(unit((0.0), (2), (2)), (0), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">unit</span><span class="p">((</span><span class="mf">0.0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_pre_hess+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (0)))==(\old(mat_get(unit((0.0), (2), (2)), (0), (0)))));
  @ assigns *(compute_pre_hess+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (0)))==(\old(mat_get(unit((0.0), (2), (2)), (0), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_hess+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_hess_sub_0()
{
    compute_pre_hess[(0)] = (0.0);
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_hess_sub_0</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_hess_sub_1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (1)))==(\old(mat_get(unit((0.0), (2), (2)), (0), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">unit</span><span class="p">((</span><span class="mf">0.0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_pre_hess+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (1)))==(\old(mat_get(unit((0.0), (2), (2)), (0), (1)))));
  @ assigns *(compute_pre_hess+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (1)))==(\old(mat_get(unit((0.0), (2), (2)), (0), (1)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_hess+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_hess_sub_1()
{
    compute_pre_hess[(2)] = (0.0);
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_hess_sub_1</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_hess_sub_2">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (0)))==(\old(mat_get(unit((0.0), (2), (2)), (1), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">unit</span><span class="p">((</span><span class="mf">0.0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_pre_hess+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (0)))==(\old(mat_get(unit((0.0), (2), (2)), (1), (0)))));
  @ assigns *(compute_pre_hess+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (0)))==(\old(mat_get(unit((0.0), (2), (2)), (1), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_hess+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_hess_sub_2()
{
    compute_pre_hess[(1)] = (0.0);
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_hess_sub_2</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_pre_hess_sub_3">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (1)))==(\old(mat_get(unit((0.0), (2), (2)), (1), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">unit</span><span class="p">((</span><span class="mf">0.0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_pre_hess+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (1)))==(\old(mat_get(unit((0.0), (2), (2)), (1), (1)))));
  @ assigns *(compute_pre_hess+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (1)))==(\old(mat_get(unit((0.0), (2), (2)), (1), (1)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_pre_hess+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_pre_hess_sub_3()
{
    compute_pre_hess[(3)] = (0.0);
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_pre_hess_sub_3</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="compute_dx">
        <contract >
            <require >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="n">hess</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </require>
            <require >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)compute_pre_grad), (2), (1)))==(grad(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_grad</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="n">grad</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </require>
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)pathfollowing_dx), (2), (1)))==(mat_scal(mat_mult(inv(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))), mat_add(grad(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1))), mat_scal(LOGIC_c, pathfollowing_t))), (-1.0))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_dx</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="n">mat_scal</span><span class="p">(</span><span class="n">mat_mult</span><span class="p">(</span><span class="n">inv</span><span class="p">(</span><span class="n">hess</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))),</span> <span class="n">mat_add</span><span class="p">(</span><span class="n">grad</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))),</span> <span class="n">mat_scal</span><span class="p">(</span><span class="n">LOGIC_c</span><span class="p">,</span> <span class="n">pathfollowing_t</span><span class="p">))),</span> <span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>Amult</dep>
                <dep>mult_idL</dep>
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_xLT+(0..2))</assign>
                <assign>cholesky_PF2_sumcho</assign>
                <assign>cholesky_PF2_i2</assign>
                <assign>*(cholesky_PF2_D+(0..4))</assign>
                <assign>cholesky_PF2_sumLT</assign>
                <assign>*(cholesky_PF2_A+(0..4))</assign>
                <assign>cholesky_PF2_sumUT</assign>
                <assign>*(cholesky_PF2_xUT+(0..2))</assign>
                <assign>cholesky_PF2_i1</assign>
                <assign>*(cholesky_PF2_L+(0..4))</assign>
                <assign>cholesky_PF2_i0</assign>
                <assign>*(cholesky_PF2_b+(0..2))</assign>
                <assign>*(cholesky_PF2_z+(0..2))</assign>
                <assign>*(pathfollowing_dx+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ requires ((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));
  @ requires ((MatVar(((double*)compute_pre_grad), (2), (1)))==(grad(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));
  @ ensures ((MatVar(((double*)pathfollowing_dx), (2), (1)))==(mat_scal(mat_mult(inv(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))), mat_add(grad(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1))), mat_scal(LOGIC_c, pathfollowing_t))), (-1.0))));
  @ assigns *(cholesky_PF2_xLT+(0..2)), cholesky_PF2_sumcho, cholesky_PF2_i2, *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumLT, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumUT, *(cholesky_PF2_xUT+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2)), *(pathfollowing_dx+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ requires ((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));</span>
<span class="lineno">3 </span><span class="cm">  @ requires ((MatVar(((double*)compute_pre_grad), (2), (1)))==(grad(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));</span>
<span class="lineno">4 </span><span class="cm">  @ ensures ((MatVar(((double*)pathfollowing_dx), (2), (1)))==(mat_scal(mat_mult(inv(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))), mat_add(grad(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1))), mat_scal(LOGIC_c, pathfollowing_t))), (-1.0))));</span>
<span class="lineno">5 </span><span class="cm">  @ assigns *(cholesky_PF2_xLT+(0..2)), cholesky_PF2_sumcho, cholesky_PF2_i2, *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumLT, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumUT, *(cholesky_PF2_xUT+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2)), *(pathfollowing_dx+(0..2));</span>
<span class="lineno">6 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void compute_dx()
{
    set_cholesky_PF2_A();
    set_cholesky_PF2_b();
    cholesky_PF2();
    set_pathfollowing_dx();
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">compute_dx</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">set_cholesky_PF2_A</span><span class="p">();</span>
<span class="lineno">4 </span>    <span class="n">set_cholesky_PF2_b</span><span class="p">();</span>
<span class="lineno">5 </span>    <span class="n">cholesky_PF2</span><span class="p">();</span>
<span class="lineno">6 </span>    <span class="n">set_pathfollowing_dx</span><span class="p">();</span>
<span class="lineno">7 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="cholesky_PF2">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)cholesky_PF2_b), (2), (1)))==(mat_mult(MatVar(((double*)cholesky_PF2_A), (2), (2)), MatVar(((double*)cholesky_PF2_xUT), (2), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_b</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="n">mat_mult</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_A</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_xUT</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_xLT+(0..2))</assign>
                <assign>cholesky_PF2_sumcho</assign>
                <assign>cholesky_PF2_i2</assign>
                <assign>*(cholesky_PF2_D+(0..4))</assign>
                <assign>cholesky_PF2_sumLT</assign>
                <assign>cholesky_PF2_sumUT</assign>
                <assign>*(cholesky_PF2_xUT+(0..2))</assign>
                <assign>cholesky_PF2_i1</assign>
                <assign>*(cholesky_PF2_L+(0..4))</assign>
                <assign>cholesky_PF2_i0</assign>
                <assign>*(cholesky_PF2_z+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)cholesky_PF2_b), (2), (1)))==(mat_mult(MatVar(((double*)cholesky_PF2_A), (2), (2)), MatVar(((double*)cholesky_PF2_xUT), (2), (1)))));
  @ assigns *(cholesky_PF2_xLT+(0..2)), cholesky_PF2_sumcho, cholesky_PF2_i2, *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumLT, cholesky_PF2_sumUT, *(cholesky_PF2_xUT+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_i0, *(cholesky_PF2_z+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)cholesky_PF2_b), (2), (1)))==(mat_mult(MatVar(((double*)cholesky_PF2_A), (2), (2)), MatVar(((double*)cholesky_PF2_xUT), (2), (1)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_xLT+(0..2)), cholesky_PF2_sumcho, cholesky_PF2_i2, *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumLT, cholesky_PF2_sumUT, *(cholesky_PF2_xUT+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_i0, *(cholesky_PF2_z+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void cholesky_PF2()
{
    /*@
      @loop invariant (((((0))<=(cholesky_PF2_i0)))&&(((cholesky_PF2_i0)<=((2)))));
      @ loop assigns cholesky_PF2_sumcho, cholesky_PF2_i2, *(cholesky_PF2_D+(0..4)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_i0;
    */
    for (cholesky_PF2_i0 = (0);cholesky_PF2_i0 < (2);cholesky_PF2_i0++)
    {
        cholesky_PF2_sumcho = (0.0);
        /*@
          @loop invariant (((((0))<=(cholesky_PF2_i1)))&&(((cholesky_PF2_i1)<=(cholesky_PF2_i0))));
          @ loop assigns cholesky_PF2_i1, cholesky_PF2_sumcho;
        */
        for (cholesky_PF2_i1 = (0);cholesky_PF2_i1 < cholesky_PF2_i0;cholesky_PF2_i1++)
        {
            cholesky_PF2_sumcho = ((cholesky_PF2_sumcho)+(((((cholesky_PF2_L[((cholesky_PF2_i0)+(((cholesky_PF2_i1)*((2)))))])*(cholesky_PF2_L[((cholesky_PF2_i0)+(((cholesky_PF2_i1)*((2)))))])))*(cholesky_PF2_D[((cholesky_PF2_i1)+(((cholesky_PF2_i1)*((2)))))]))));
        }
        cholesky_PF2_D[((cholesky_PF2_i0)+(((cholesky_PF2_i0)*((2)))))] = ((cholesky_PF2_A[((cholesky_PF2_i0)+(((cholesky_PF2_i0)*((2)))))])-(cholesky_PF2_sumcho));
        /*@
          @loop invariant ((((((cholesky_PF2_i0)+((1))))<=(cholesky_PF2_i1)))&&(((cholesky_PF2_i1)<=((2)))));
          @ loop assigns cholesky_PF2_i2, cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_sumcho;
        */
        for (cholesky_PF2_i1 = ((cholesky_PF2_i0)+((1)));cholesky_PF2_i1 < (2);cholesky_PF2_i1++)
        {
            cholesky_PF2_sumcho = (0.0);
            /*@
              @loop invariant (((((0))<=(cholesky_PF2_i2)))&&(((cholesky_PF2_i2)<=(cholesky_PF2_i0))));
              @ loop assigns cholesky_PF2_i2, cholesky_PF2_sumcho;
            */
            for (cholesky_PF2_i2 = (0);cholesky_PF2_i2 < cholesky_PF2_i0;cholesky_PF2_i2++)
            {
                cholesky_PF2_sumcho = ((cholesky_PF2_sumcho)+(((((cholesky_PF2_L[((cholesky_PF2_i1)+(((cholesky_PF2_i2)*((2)))))])*(cholesky_PF2_L[((cholesky_PF2_i0)+(((cholesky_PF2_i2)*((2)))))])))*(cholesky_PF2_D[((cholesky_PF2_i2)+(((cholesky_PF2_i2)*((2)))))]))));
            }
            cholesky_PF2_L[((cholesky_PF2_i1)+(((cholesky_PF2_i0)*((2)))))] = ((((cholesky_PF2_A[((cholesky_PF2_i1)+(((cholesky_PF2_i0)*((2)))))])-(cholesky_PF2_sumcho)))/(cholesky_PF2_D[((cholesky_PF2_i0)+(((cholesky_PF2_i0)*((2)))))]));
        }
    }
    /*@
      @loop invariant (((((0))<=(cholesky_PF2_i0)))&&(((cholesky_PF2_i0)<=((2)))));
      @ loop assigns *(cholesky_PF2_xLT+(0..2)), cholesky_PF2_i1, cholesky_PF2_sumLT, cholesky_PF2_i0;
    */
    for (cholesky_PF2_i0 = (0);cholesky_PF2_i0 < (2);cholesky_PF2_i0++)
    {
        cholesky_PF2_sumLT = (0.0);
        /*@
          @loop invariant (((((0))<=(cholesky_PF2_i1)))&&(((cholesky_PF2_i1)<=(cholesky_PF2_i0))));
          @ loop assigns cholesky_PF2_i1, cholesky_PF2_sumLT;
        */
        for (cholesky_PF2_i1 = (0);cholesky_PF2_i1 < cholesky_PF2_i0;cholesky_PF2_i1++)
        {
            cholesky_PF2_sumLT = ((cholesky_PF2_sumLT)+(((cholesky_PF2_L[((cholesky_PF2_i0)+(((cholesky_PF2_i1)*((2)))))])*(cholesky_PF2_xLT[cholesky_PF2_i1]))));
        }
        cholesky_PF2_xLT[cholesky_PF2_i0] = ((cholesky_PF2_b[cholesky_PF2_i0])-(cholesky_PF2_sumLT));
    }
    /*@
      @loop invariant (((((0))<=(cholesky_PF2_i0)))&&(((cholesky_PF2_i0)<=((2)))));
      @ loop assigns *(cholesky_PF2_z+(0..2)), cholesky_PF2_i0;
    */
    for (cholesky_PF2_i0 = (0);cholesky_PF2_i0 < (2);cholesky_PF2_i0++)
    {
        cholesky_PF2_z[cholesky_PF2_i0] = ((cholesky_PF2_xLT[cholesky_PF2_i0])/(cholesky_PF2_D[((cholesky_PF2_i0)+(((cholesky_PF2_i0)*((2)))))]));
    }
    /*@
      @loop invariant (((((0))<=(cholesky_PF2_i0)))&&(((cholesky_PF2_i0)<=((2)))));
      @ loop assigns *(cholesky_PF2_xUT+(0..2)), cholesky_PF2_i1, cholesky_PF2_i0, cholesky_PF2_sumUT;
    */
    for (cholesky_PF2_i0 = (0);cholesky_PF2_i0 < (2);cholesky_PF2_i0++)
    {
        cholesky_PF2_sumUT = (0.0);
        /*@
          @loop invariant (((((((2))-(cholesky_PF2_i0)))<=(cholesky_PF2_i1)))&&(((cholesky_PF2_i1)<=((2)))));
          @ loop assigns cholesky_PF2_i1, cholesky_PF2_sumUT;
        */
        for (cholesky_PF2_i1 = (((2))-(cholesky_PF2_i0));cholesky_PF2_i1 < (2);cholesky_PF2_i1++)
        {
            cholesky_PF2_sumUT = ((cholesky_PF2_sumUT)+(((cholesky_PF2_L[((cholesky_PF2_i1)+((((((((2))-(cholesky_PF2_i0)))-((1))))*((2)))))])*(cholesky_PF2_xUT[cholesky_PF2_i1]))));
        }
        cholesky_PF2_xUT[(((((2))-(cholesky_PF2_i0)))-((1)))] = ((cholesky_PF2_z[(((((2))-(cholesky_PF2_i0)))-((1)))])-(cholesky_PF2_sumUT));
    }
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">cholesky_PF2</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="cm">/*@</span>
<span class="lineno"> 4 </span><span class="cm">      @loop invariant (((((0))&lt;=(cholesky_PF2_i0)))&amp;&amp;(((cholesky_PF2_i0)&lt;=((2)))));</span>
<span class="lineno"> 5 </span><span class="cm">      @ loop assigns cholesky_PF2_sumcho, cholesky_PF2_i2, *(cholesky_PF2_D+(0..4)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_i0;</span>
<span class="lineno"> 6 </span><span class="cm">    */</span>
<span class="lineno"> 7 </span>    <span class="k">for</span> <span class="p">(</span><span class="n">cholesky_PF2_i0</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">cholesky_PF2_i0</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">2</span><span class="p">);</span><span class="n">cholesky_PF2_i0</span><span class="o">++</span><span class="p">)</span>
<span class="lineno"> 8 </span>    <span class="p">{</span>
<span class="lineno"> 9 </span>        <span class="n">cholesky_PF2_sumcho</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
<span class="lineno">10 </span>        <span class="cm">/*@</span>
<span class="lineno">11 </span><span class="cm">          @loop invariant (((((0))&lt;=(cholesky_PF2_i1)))&amp;&amp;(((cholesky_PF2_i1)&lt;=(cholesky_PF2_i0))));</span>
<span class="lineno">12 </span><span class="cm">          @ loop assigns cholesky_PF2_i1, cholesky_PF2_sumcho;</span>
<span class="lineno">13 </span><span class="cm">        */</span>
<span class="lineno">14 </span>        <span class="k">for</span> <span class="p">(</span><span class="n">cholesky_PF2_i1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">cholesky_PF2_i1</span> <span class="o">&lt;</span> <span class="n">cholesky_PF2_i0</span><span class="p">;</span><span class="n">cholesky_PF2_i1</span><span class="o">++</span><span class="p">)</span>
<span class="lineno">15 </span>        <span class="p">{</span>
<span class="lineno">16 </span>            <span class="n">cholesky_PF2_sumcho</span> <span class="o">=</span> <span class="p">((</span><span class="n">cholesky_PF2_sumcho</span><span class="p">)</span><span class="o">+</span><span class="p">(((((</span><span class="n">cholesky_PF2_L</span><span class="p">[((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i1</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))])</span><span class="o">*</span><span class="p">(</span><span class="n">cholesky_PF2_L</span><span class="p">[((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i1</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))])))</span><span class="o">*</span><span class="p">(</span><span class="n">cholesky_PF2_D</span><span class="p">[((</span><span class="n">cholesky_PF2_i1</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i1</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))]))));</span>
<span class="lineno">17 </span>        <span class="p">}</span>
<span class="lineno">18 </span>        <span class="n">cholesky_PF2_D</span><span class="p">[((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))]</span> <span class="o">=</span> <span class="p">((</span><span class="n">cholesky_PF2_A</span><span class="p">[((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))])</span><span class="o">-</span><span class="p">(</span><span class="n">cholesky_PF2_sumcho</span><span class="p">));</span>
<span class="lineno">19 </span>        <span class="cm">/*@</span>
<span class="lineno">20 </span><span class="cm">          @loop invariant ((((((cholesky_PF2_i0)+((1))))&lt;=(cholesky_PF2_i1)))&amp;&amp;(((cholesky_PF2_i1)&lt;=((2)))));</span>
<span class="lineno">21 </span><span class="cm">          @ loop assigns cholesky_PF2_i2, cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_sumcho;</span>
<span class="lineno">22 </span><span class="cm">        */</span>
<span class="lineno">23 </span>        <span class="k">for</span> <span class="p">(</span><span class="n">cholesky_PF2_i1</span> <span class="o">=</span> <span class="p">((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="mi">1</span><span class="p">)));</span><span class="n">cholesky_PF2_i1</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">2</span><span class="p">);</span><span class="n">cholesky_PF2_i1</span><span class="o">++</span><span class="p">)</span>
<span class="lineno">24 </span>        <span class="p">{</span>
<span class="lineno">25 </span>            <span class="n">cholesky_PF2_sumcho</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
<span class="lineno">26 </span>            <span class="cm">/*@</span>
<span class="lineno">27 </span><span class="cm">              @loop invariant (((((0))&lt;=(cholesky_PF2_i2)))&amp;&amp;(((cholesky_PF2_i2)&lt;=(cholesky_PF2_i0))));</span>
<span class="lineno">28 </span><span class="cm">              @ loop assigns cholesky_PF2_i2, cholesky_PF2_sumcho;</span>
<span class="lineno">29 </span><span class="cm">            */</span>
<span class="lineno">30 </span>            <span class="k">for</span> <span class="p">(</span><span class="n">cholesky_PF2_i2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">cholesky_PF2_i2</span> <span class="o">&lt;</span> <span class="n">cholesky_PF2_i0</span><span class="p">;</span><span class="n">cholesky_PF2_i2</span><span class="o">++</span><span class="p">)</span>
<span class="lineno">31 </span>            <span class="p">{</span>
<span class="lineno">32 </span>                <span class="n">cholesky_PF2_sumcho</span> <span class="o">=</span> <span class="p">((</span><span class="n">cholesky_PF2_sumcho</span><span class="p">)</span><span class="o">+</span><span class="p">(((((</span><span class="n">cholesky_PF2_L</span><span class="p">[((</span><span class="n">cholesky_PF2_i1</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i2</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))])</span><span class="o">*</span><span class="p">(</span><span class="n">cholesky_PF2_L</span><span class="p">[((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i2</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))])))</span><span class="o">*</span><span class="p">(</span><span class="n">cholesky_PF2_D</span><span class="p">[((</span><span class="n">cholesky_PF2_i2</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i2</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))]))));</span>
<span class="lineno">33 </span>            <span class="p">}</span>
<span class="lineno">34 </span>            <span class="n">cholesky_PF2_L</span><span class="p">[((</span><span class="n">cholesky_PF2_i1</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))]</span> <span class="o">=</span> <span class="p">((((</span><span class="n">cholesky_PF2_A</span><span class="p">[((</span><span class="n">cholesky_PF2_i1</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))])</span><span class="o">-</span><span class="p">(</span><span class="n">cholesky_PF2_sumcho</span><span class="p">)))</span><span class="o">/</span><span class="p">(</span><span class="n">cholesky_PF2_D</span><span class="p">[((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))]));</span>
<span class="lineno">35 </span>        <span class="p">}</span>
<span class="lineno">36 </span>    <span class="p">}</span>
<span class="lineno">37 </span>    <span class="cm">/*@</span>
<span class="lineno">38 </span><span class="cm">      @loop invariant (((((0))&lt;=(cholesky_PF2_i0)))&amp;&amp;(((cholesky_PF2_i0)&lt;=((2)))));</span>
<span class="lineno">39 </span><span class="cm">      @ loop assigns *(cholesky_PF2_xLT+(0..2)), cholesky_PF2_i1, cholesky_PF2_sumLT, cholesky_PF2_i0;</span>
<span class="lineno">40 </span><span class="cm">    */</span>
<span class="lineno">41 </span>    <span class="k">for</span> <span class="p">(</span><span class="n">cholesky_PF2_i0</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">cholesky_PF2_i0</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">2</span><span class="p">);</span><span class="n">cholesky_PF2_i0</span><span class="o">++</span><span class="p">)</span>
<span class="lineno">42 </span>    <span class="p">{</span>
<span class="lineno">43 </span>        <span class="n">cholesky_PF2_sumLT</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
<span class="lineno">44 </span>        <span class="cm">/*@</span>
<span class="lineno">45 </span><span class="cm">          @loop invariant (((((0))&lt;=(cholesky_PF2_i1)))&amp;&amp;(((cholesky_PF2_i1)&lt;=(cholesky_PF2_i0))));</span>
<span class="lineno">46 </span><span class="cm">          @ loop assigns cholesky_PF2_i1, cholesky_PF2_sumLT;</span>
<span class="lineno">47 </span><span class="cm">        */</span>
<span class="lineno">48 </span>        <span class="k">for</span> <span class="p">(</span><span class="n">cholesky_PF2_i1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">cholesky_PF2_i1</span> <span class="o">&lt;</span> <span class="n">cholesky_PF2_i0</span><span class="p">;</span><span class="n">cholesky_PF2_i1</span><span class="o">++</span><span class="p">)</span>
<span class="lineno">49 </span>        <span class="p">{</span>
<span class="lineno">50 </span>            <span class="n">cholesky_PF2_sumLT</span> <span class="o">=</span> <span class="p">((</span><span class="n">cholesky_PF2_sumLT</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_L</span><span class="p">[((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i1</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))])</span><span class="o">*</span><span class="p">(</span><span class="n">cholesky_PF2_xLT</span><span class="p">[</span><span class="n">cholesky_PF2_i1</span><span class="p">]))));</span>
<span class="lineno">51 </span>        <span class="p">}</span>
<span class="lineno">52 </span>        <span class="n">cholesky_PF2_xLT</span><span class="p">[</span><span class="n">cholesky_PF2_i0</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">cholesky_PF2_b</span><span class="p">[</span><span class="n">cholesky_PF2_i0</span><span class="p">])</span><span class="o">-</span><span class="p">(</span><span class="n">cholesky_PF2_sumLT</span><span class="p">));</span>
<span class="lineno">53 </span>    <span class="p">}</span>
<span class="lineno">54 </span>    <span class="cm">/*@</span>
<span class="lineno">55 </span><span class="cm">      @loop invariant (((((0))&lt;=(cholesky_PF2_i0)))&amp;&amp;(((cholesky_PF2_i0)&lt;=((2)))));</span>
<span class="lineno">56 </span><span class="cm">      @ loop assigns *(cholesky_PF2_z+(0..2)), cholesky_PF2_i0;</span>
<span class="lineno">57 </span><span class="cm">    */</span>
<span class="lineno">58 </span>    <span class="k">for</span> <span class="p">(</span><span class="n">cholesky_PF2_i0</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">cholesky_PF2_i0</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">2</span><span class="p">);</span><span class="n">cholesky_PF2_i0</span><span class="o">++</span><span class="p">)</span>
<span class="lineno">59 </span>    <span class="p">{</span>
<span class="lineno">60 </span>        <span class="n">cholesky_PF2_z</span><span class="p">[</span><span class="n">cholesky_PF2_i0</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">cholesky_PF2_xLT</span><span class="p">[</span><span class="n">cholesky_PF2_i0</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">cholesky_PF2_D</span><span class="p">[((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_i0</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))]));</span>
<span class="lineno">61 </span>    <span class="p">}</span>
<span class="lineno">62 </span>    <span class="cm">/*@</span>
<span class="lineno">63 </span><span class="cm">      @loop invariant (((((0))&lt;=(cholesky_PF2_i0)))&amp;&amp;(((cholesky_PF2_i0)&lt;=((2)))));</span>
<span class="lineno">64 </span><span class="cm">      @ loop assigns *(cholesky_PF2_xUT+(0..2)), cholesky_PF2_i1, cholesky_PF2_i0, cholesky_PF2_sumUT;</span>
<span class="lineno">65 </span><span class="cm">    */</span>
<span class="lineno">66 </span>    <span class="k">for</span> <span class="p">(</span><span class="n">cholesky_PF2_i0</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="n">cholesky_PF2_i0</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">2</span><span class="p">);</span><span class="n">cholesky_PF2_i0</span><span class="o">++</span><span class="p">)</span>
<span class="lineno">67 </span>    <span class="p">{</span>
<span class="lineno">68 </span>        <span class="n">cholesky_PF2_sumUT</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
<span class="lineno">69 </span>        <span class="cm">/*@</span>
<span class="lineno">70 </span><span class="cm">          @loop invariant (((((((2))-(cholesky_PF2_i0)))&lt;=(cholesky_PF2_i1)))&amp;&amp;(((cholesky_PF2_i1)&lt;=((2)))));</span>
<span class="lineno">71 </span><span class="cm">          @ loop assigns cholesky_PF2_i1, cholesky_PF2_sumUT;</span>
<span class="lineno">72 </span><span class="cm">        */</span>
<span class="lineno">73 </span>        <span class="k">for</span> <span class="p">(</span><span class="n">cholesky_PF2_i1</span> <span class="o">=</span> <span class="p">(((</span><span class="mi">2</span><span class="p">))</span><span class="o">-</span><span class="p">(</span><span class="n">cholesky_PF2_i0</span><span class="p">));</span><span class="n">cholesky_PF2_i1</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">2</span><span class="p">);</span><span class="n">cholesky_PF2_i1</span><span class="o">++</span><span class="p">)</span>
<span class="lineno">74 </span>        <span class="p">{</span>
<span class="lineno">75 </span>            <span class="n">cholesky_PF2_sumUT</span> <span class="o">=</span> <span class="p">((</span><span class="n">cholesky_PF2_sumUT</span><span class="p">)</span><span class="o">+</span><span class="p">(((</span><span class="n">cholesky_PF2_L</span><span class="p">[((</span><span class="n">cholesky_PF2_i1</span><span class="p">)</span><span class="o">+</span><span class="p">((((((((</span><span class="mi">2</span><span class="p">))</span><span class="o">-</span><span class="p">(</span><span class="n">cholesky_PF2_i0</span><span class="p">)))</span><span class="o">-</span><span class="p">((</span><span class="mi">1</span><span class="p">))))</span><span class="o">*</span><span class="p">((</span><span class="mi">2</span><span class="p">)))))])</span><span class="o">*</span><span class="p">(</span><span class="n">cholesky_PF2_xUT</span><span class="p">[</span><span class="n">cholesky_PF2_i1</span><span class="p">]))));</span>
<span class="lineno">76 </span>        <span class="p">}</span>
<span class="lineno">77 </span>        <span class="n">cholesky_PF2_xUT</span><span class="p">[(((((</span><span class="mi">2</span><span class="p">))</span><span class="o">-</span><span class="p">(</span><span class="n">cholesky_PF2_i0</span><span class="p">)))</span><span class="o">-</span><span class="p">((</span><span class="mi">1</span><span class="p">)))]</span> <span class="o">=</span> <span class="p">((</span><span class="n">cholesky_PF2_z</span><span class="p">[(((((</span><span class="mi">2</span><span class="p">))</span><span class="o">-</span><span class="p">(</span><span class="n">cholesky_PF2_i0</span><span class="p">)))</span><span class="o">-</span><span class="p">((</span><span class="mi">1</span><span class="p">)))])</span><span class="o">-</span><span class="p">(</span><span class="n">cholesky_PF2_sumUT</span><span class="p">));</span>
<span class="lineno">78 </span>    <span class="p">}</span>
<span class="lineno">79 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_A">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)cholesky_PF2_A), (2), (2)))==(\old(MatVar(((double*)compute_pre_hess), (2), (2)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_A</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>mat_eq_def_2_2</dep>
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_A+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)cholesky_PF2_A), (2), (2)))==(\old(MatVar(((double*)compute_pre_hess), (2), (2)))));
  @ assigns *(cholesky_PF2_A+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)cholesky_PF2_A), (2), (2)))==(\old(MatVar(((double*)compute_pre_hess), (2), (2)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_A+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_A()
{
    set_cholesky_PF2_A_sub_0();
    set_cholesky_PF2_A_sub_1();
    set_cholesky_PF2_A_sub_2();
    set_cholesky_PF2_A_sub_3();
    //@assert (((getM(MatVar(((double*)cholesky_PF2_A), (2), (2))))==((2))));
    //@assert (((getN(MatVar(((double*)cholesky_PF2_A), (2), (2))))==((2))));
    //@assert (((getM(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre)))==((2))));
    //@assert (((getN(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre)))==((2))));
    //@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (1)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (1), (1)))));
    //@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (0)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (1), (0)))));
    //@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (1)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (0), (1)))));
    //@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (0)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (0), (0)))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_A</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">set_cholesky_PF2_A_sub_0</span><span class="p">();</span>
<span class="lineno"> 4 </span>    <span class="n">set_cholesky_PF2_A_sub_1</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="n">set_cholesky_PF2_A_sub_2</span><span class="p">();</span>
<span class="lineno"> 6 </span>    <span class="n">set_cholesky_PF2_A_sub_3</span><span class="p">();</span>
<span class="lineno"> 7 </span>    <span class="c1">//@assert (((getM(MatVar(((double*)cholesky_PF2_A), (2), (2))))==((2))));</span>
<span class="lineno"> 8 </span>    <span class="c1">//@assert (((getN(MatVar(((double*)cholesky_PF2_A), (2), (2))))==((2))));</span>
<span class="lineno"> 9 </span>    <span class="c1">//@assert (((getM(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre)))==((2))));</span>
<span class="lineno">10 </span>    <span class="c1">//@assert (((getN(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre)))==((2))));</span>
<span class="lineno">11 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (1)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (1), (1)))));</span>
<span class="lineno">12 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (0)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (1), (0)))));</span>
<span class="lineno">13 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (1)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (0), (1)))));</span>
<span class="lineno">14 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (0)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (0), (0)))));</span>
<span class="lineno">15 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_A_sub_0">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (0)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_A</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_A+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (0)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (0)))));
  @ assigns *(cholesky_PF2_A+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (0)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_A+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_A_sub_0()
{
    cholesky_PF2_A[(0)] = compute_pre_hess[(0)];
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_A_sub_0</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">cholesky_PF2_A</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)];</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_A_sub_1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (1)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_A</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_A+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (1)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (1)))));
  @ assigns *(cholesky_PF2_A+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (1)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (1)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_A+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_A_sub_1()
{
    cholesky_PF2_A[(2)] = compute_pre_hess[(2)];
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_A_sub_1</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">cholesky_PF2_A</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]</span> <span class="o">=</span> <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)];</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_A_sub_2">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (0)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_A</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_A+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (0)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (0)))));
  @ assigns *(cholesky_PF2_A+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (0)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_A+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_A_sub_2()
{
    cholesky_PF2_A[(1)] = compute_pre_hess[(1)];
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_A_sub_2</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">cholesky_PF2_A</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">1</span><span class="p">)];</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_A_sub_3">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (1)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_A</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_A+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (1)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (1)))));
  @ assigns *(cholesky_PF2_A+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (1)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (1)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_A+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_A_sub_3()
{
    cholesky_PF2_A[(3)] = compute_pre_hess[(3)];
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_A_sub_3</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">cholesky_PF2_A</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]</span> <span class="o">=</span> <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)];</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_b">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)cholesky_PF2_b), (2), (1)))==(\old(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_b</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_add</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_grad</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="n">mat_scal</span><span class="p">(</span><span class="n">LOGIC_c</span><span class="p">,</span> <span class="n">pathfollowing_t</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>mat_eq_def_2_1</dep>
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_b+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)cholesky_PF2_b), (2), (1)))==(\old(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)))));
  @ assigns *(cholesky_PF2_b+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)cholesky_PF2_b), (2), (1)))==(\old(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_b+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_b()
{
    set_cholesky_PF2_b_sub_0();
    set_cholesky_PF2_b_sub_1();
    //@assert (((getM(MatVar(((double*)cholesky_PF2_b), (2), (1))))==((2))));
    //@assert (((getN(MatVar(((double*)cholesky_PF2_b), (2), (1))))==((1))));
    //@assert (((getM(\at(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), Pre)))==((2))));
    //@assert (((getN(\at(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), Pre)))==((1))));
    //@assert (((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (1), (0)))==(mat_get(\at(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), Pre), (1), (0)))));
    //@assert (((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (0), (0)))==(mat_get(\at(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), Pre), (0), (0)))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_b</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">set_cholesky_PF2_b_sub_0</span><span class="p">();</span>
<span class="lineno"> 4 </span>    <span class="n">set_cholesky_PF2_b_sub_1</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="c1">//@assert (((getM(MatVar(((double*)cholesky_PF2_b), (2), (1))))==((2))));</span>
<span class="lineno"> 6 </span>    <span class="c1">//@assert (((getN(MatVar(((double*)cholesky_PF2_b), (2), (1))))==((1))));</span>
<span class="lineno"> 7 </span>    <span class="c1">//@assert (((getM(\at(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), Pre)))==((2))));</span>
<span class="lineno"> 8 </span>    <span class="c1">//@assert (((getN(\at(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), Pre)))==((1))));</span>
<span class="lineno"> 9 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (1), (0)))==(mat_get(\at(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), Pre), (1), (0)))));</span>
<span class="lineno">10 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (0), (0)))==(mat_get(\at(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), Pre), (0), (0)))));</span>
<span class="lineno">11 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_b_sub_0">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (0), (0)))==(\old(mat_get(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), (0), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_b</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">mat_add</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_grad</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="n">mat_scal</span><span class="p">(</span><span class="n">LOGIC_c</span><span class="p">,</span> <span class="n">pathfollowing_t</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_b+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (0), (0)))==(\old(mat_get(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), (0), (0)))));
  @ assigns *(cholesky_PF2_b+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (0), (0)))==(\old(mat_get(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), (0), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_b+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_b_sub_0()
{
    cholesky_PF2_b[(0)] = ((compute_pre_grad[(0)])+((((-1.0))*(pathfollowing_t))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_b_sub_0</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">cholesky_PF2_b</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">+</span><span class="p">((((</span><span class="o">-</span><span class="mf">1.0</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="n">pathfollowing_t</span><span class="p">))));</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_b_sub_1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (1), (0)))==(\old(mat_get(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), (1), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_b</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">mat_add</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_grad</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="n">mat_scal</span><span class="p">(</span><span class="n">LOGIC_c</span><span class="p">,</span> <span class="n">pathfollowing_t</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_b+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (1), (0)))==(\old(mat_get(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), (1), (0)))));
  @ assigns *(cholesky_PF2_b+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (1), (0)))==(\old(mat_get(mat_add(MatVar(((double*)compute_pre_grad), (2), (1)), mat_scal(LOGIC_c, pathfollowing_t)), (1), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_b+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_b_sub_1()
{
    cholesky_PF2_b[(1)] = ((compute_pre_grad[(1)])+((((4.0))*(pathfollowing_t))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_b_sub_1</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">cholesky_PF2_b</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">compute_pre_grad</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])</span><span class="o">+</span><span class="p">((((</span><span class="mf">4.0</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="n">pathfollowing_t</span><span class="p">))));</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_pathfollowing_dx">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)pathfollowing_dx), (2), (1)))==(\old(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_dx</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_scal</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_xUT</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>mat_eq_def_2_1</dep>
            </hints>
            <assigns >
                <assign>*(pathfollowing_dx+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)pathfollowing_dx), (2), (1)))==(\old(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)))));
  @ assigns *(pathfollowing_dx+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)pathfollowing_dx), (2), (1)))==(\old(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(pathfollowing_dx+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_pathfollowing_dx()
{
    set_pathfollowing_dx_sub_0();
    set_pathfollowing_dx_sub_1();
    //@assert (((getM(MatVar(((double*)pathfollowing_dx), (2), (1))))==((2))));
    //@assert (((getN(MatVar(((double*)pathfollowing_dx), (2), (1))))==((1))));
    //@assert (((getM(\at(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), Pre)))==((2))));
    //@assert (((getN(\at(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), Pre)))==((1))));
    //@assert (((mat_get(MatVar(((double*)pathfollowing_dx), (2), (1)), (1), (0)))==(mat_get(\at(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), Pre), (1), (0)))));
    //@assert (((mat_get(MatVar(((double*)pathfollowing_dx), (2), (1)), (0), (0)))==(mat_get(\at(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), Pre), (0), (0)))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">set_pathfollowing_dx</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">set_pathfollowing_dx_sub_0</span><span class="p">();</span>
<span class="lineno"> 4 </span>    <span class="n">set_pathfollowing_dx_sub_1</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="c1">//@assert (((getM(MatVar(((double*)pathfollowing_dx), (2), (1))))==((2))));</span>
<span class="lineno"> 6 </span>    <span class="c1">//@assert (((getN(MatVar(((double*)pathfollowing_dx), (2), (1))))==((1))));</span>
<span class="lineno"> 7 </span>    <span class="c1">//@assert (((getM(\at(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), Pre)))==((2))));</span>
<span class="lineno"> 8 </span>    <span class="c1">//@assert (((getN(\at(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), Pre)))==((1))));</span>
<span class="lineno"> 9 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)pathfollowing_dx), (2), (1)), (1), (0)))==(mat_get(\at(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), Pre), (1), (0)))));</span>
<span class="lineno">10 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)pathfollowing_dx), (2), (1)), (0), (0)))==(mat_get(\at(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), Pre), (0), (0)))));</span>
<span class="lineno">11 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_pathfollowing_dx_sub_0">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)pathfollowing_dx), (2), (1)), (0), (0)))==(\old(mat_get(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), (0), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_dx</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">mat_scal</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_xUT</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(pathfollowing_dx+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)pathfollowing_dx), (2), (1)), (0), (0)))==(\old(mat_get(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), (0), (0)))));
  @ assigns *(pathfollowing_dx+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)pathfollowing_dx), (2), (1)), (0), (0)))==(\old(mat_get(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), (0), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(pathfollowing_dx+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_pathfollowing_dx_sub_0()
{
    pathfollowing_dx[(0)] = ((cholesky_PF2_xUT[(0)])*((-1.0)));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_pathfollowing_dx_sub_0</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">pathfollowing_dx</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">cholesky_PF2_xUT</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">*</span><span class="p">((</span><span class="o">-</span><span class="mf">1.0</span><span class="p">)));</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_pathfollowing_dx_sub_1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)pathfollowing_dx), (2), (1)), (1), (0)))==(\old(mat_get(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), (1), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_dx</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">mat_scal</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_xUT</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(pathfollowing_dx+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)pathfollowing_dx), (2), (1)), (1), (0)))==(\old(mat_get(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), (1), (0)))));
  @ assigns *(pathfollowing_dx+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)pathfollowing_dx), (2), (1)), (1), (0)))==(\old(mat_get(mat_scal(MatVar(((double*)cholesky_PF2_xUT), (2), (1)), (-1.0)), (1), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(pathfollowing_dx+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_pathfollowing_dx_sub_1()
{
    pathfollowing_dx[(1)] = ((cholesky_PF2_xUT[(1)])*((-1.0)));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_pathfollowing_dx_sub_1</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">pathfollowing_dx</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">cholesky_PF2_xUT</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])</span><span class="o">*</span><span class="p">((</span><span class="o">-</span><span class="mf">1.0</span><span class="p">)));</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="update_x">
        <contract >
            <require >
                <code>
                    <verbatim>
                        <![CDATA[acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.25))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="n">acc</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">LOGIC_c</span><span class="p">,</span> <span class="n">pathfollowing_t</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mf">0.25</span><span class="p">))</span>
</pre></div>

                    </pp>
                </code>
            </require>
            <require >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="n">hess</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </require>
            <require >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)compute_pre_grad), (2), (1)))==(grad(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_grad</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="n">grad</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </require>
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.1111111111111111))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="n">acc</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">LOGIC_c</span><span class="p">,</span> <span class="n">pathfollowing_t</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mf">0.1111111111111111</span><span class="p">))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>theorem_4_1_14_apply</dep>
                <dep>update_x_ensures</dep>
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_xLT+(0..2))</assign>
                <assign>cholesky_PF2_sumcho</assign>
                <assign>cholesky_PF2_i2</assign>
                <assign>*(pathfollowing_X+(0..2))</assign>
                <assign>*(cholesky_PF2_D+(0..4))</assign>
                <assign>cholesky_PF2_sumLT</assign>
                <assign>*(cholesky_PF2_A+(0..4))</assign>
                <assign>cholesky_PF2_sumUT</assign>
                <assign>*(cholesky_PF2_xUT+(0..2))</assign>
                <assign>cholesky_PF2_i1</assign>
                <assign>*(cholesky_PF2_L+(0..4))</assign>
                <assign>cholesky_PF2_i0</assign>
                <assign>*(cholesky_PF2_b+(0..2))</assign>
                <assign>*(cholesky_PF2_z+(0..2))</assign>
                <assign>*(pathfollowing_dx+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ requires acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.25));
  @ requires ((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));
  @ requires ((MatVar(((double*)compute_pre_grad), (2), (1)))==(grad(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));
  @ ensures acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.1111111111111111));
  @ assigns *(cholesky_PF2_xLT+(0..2)), cholesky_PF2_sumcho, cholesky_PF2_i2, *(pathfollowing_X+(0..2)), *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumLT, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumUT, *(cholesky_PF2_xUT+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2)), *(pathfollowing_dx+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ requires acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.25));</span>
<span class="lineno">3 </span><span class="cm">  @ requires ((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));</span>
<span class="lineno">4 </span><span class="cm">  @ requires ((MatVar(((double*)compute_pre_grad), (2), (1)))==(grad(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));</span>
<span class="lineno">5 </span><span class="cm">  @ ensures acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.1111111111111111));</span>
<span class="lineno">6 </span><span class="cm">  @ assigns *(cholesky_PF2_xLT+(0..2)), cholesky_PF2_sumcho, cholesky_PF2_i2, *(pathfollowing_X+(0..2)), *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumLT, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumUT, *(cholesky_PF2_xUT+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2)), *(pathfollowing_dx+(0..2));</span>
<span class="lineno">7 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void update_x()
{
    compute_dx();
    set_pathfollowing_X();
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">update_x</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_dx</span><span class="p">();</span>
<span class="lineno">4 </span>    <span class="n">set_pathfollowing_X</span><span class="p">();</span>
<span class="lineno">5 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_pathfollowing_X">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)pathfollowing_X), (2), (1)))==(\old(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_add</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_dx</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>mat_eq_def_2_1</dep>
            </hints>
            <assigns >
                <assign>*(pathfollowing_X+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)pathfollowing_X), (2), (1)))==(\old(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))))));
  @ assigns *(pathfollowing_X+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)pathfollowing_X), (2), (1)))==(\old(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(pathfollowing_X+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_pathfollowing_X()
{
    set_pathfollowing_X_sub_0();
    set_pathfollowing_X_sub_1();
    //@assert (((getM(MatVar(((double*)pathfollowing_X), (2), (1))))==((2))));
    //@assert (((getN(MatVar(((double*)pathfollowing_X), (2), (1))))==((1))));
    //@assert (((getM(\at(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), Pre)))==((2))));
    //@assert (((getN(\at(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), Pre)))==((1))));
    //@assert (((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (1), (0)))==(mat_get(\at(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), Pre), (1), (0)))));
    //@assert (((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (0), (0)))==(mat_get(\at(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), Pre), (0), (0)))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">set_pathfollowing_X</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">set_pathfollowing_X_sub_0</span><span class="p">();</span>
<span class="lineno"> 4 </span>    <span class="n">set_pathfollowing_X_sub_1</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="c1">//@assert (((getM(MatVar(((double*)pathfollowing_X), (2), (1))))==((2))));</span>
<span class="lineno"> 6 </span>    <span class="c1">//@assert (((getN(MatVar(((double*)pathfollowing_X), (2), (1))))==((1))));</span>
<span class="lineno"> 7 </span>    <span class="c1">//@assert (((getM(\at(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), Pre)))==((2))));</span>
<span class="lineno"> 8 </span>    <span class="c1">//@assert (((getN(\at(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), Pre)))==((1))));</span>
<span class="lineno"> 9 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (1), (0)))==(mat_get(\at(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), Pre), (1), (0)))));</span>
<span class="lineno">10 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (0), (0)))==(mat_get(\at(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), Pre), (0), (0)))));</span>
<span class="lineno">11 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_pathfollowing_X_sub_0">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (0), (0)))==(\old(mat_get(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), (0), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">mat_add</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_dx</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(pathfollowing_X+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (0), (0)))==(\old(mat_get(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), (0), (0)))));
  @ assigns *(pathfollowing_X+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (0), (0)))==(\old(mat_get(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), (0), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(pathfollowing_X+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_pathfollowing_X_sub_0()
{
    pathfollowing_X[(0)] = ((pathfollowing_X[(0)])+(pathfollowing_dx[(0)]));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_pathfollowing_X_sub_0</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])</span><span class="o">+</span><span class="p">(</span><span class="n">pathfollowing_dx</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]));</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_pathfollowing_X_sub_1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (1), (0)))==(\old(mat_get(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), (1), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">mat_add</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_dx</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(pathfollowing_X+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (1), (0)))==(\old(mat_get(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), (1), (0)))));
  @ assigns *(pathfollowing_X+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (1), (0)))==(\old(mat_get(mat_add(MatVar(((double*)pathfollowing_X), (2), (1)), MatVar(((double*)pathfollowing_dx), (2), (1))), (1), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(pathfollowing_X+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_pathfollowing_X_sub_1()
{
    pathfollowing_X[(1)] = ((pathfollowing_X[(1)])+(pathfollowing_dx[(1)]));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_pathfollowing_X_sub_1</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">((</span><span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">1</span><span class="p">)])</span><span class="o">+</span><span class="p">(</span><span class="n">pathfollowing_dx</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]));</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="compute_dt">
        <contract >
            <require >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="n">hess</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </require>
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((pathfollowing_dt)==((((0.1388888888888889))/(norm(LOGIC_A, LOGIC_b, LOGIC_c, MatVar(((double*)pathfollowing_X), (2), (1)))))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">pathfollowing_dt</span><span class="p">)</span><span class="o">==</span><span class="p">((((</span><span class="mf">0.1388888888888889</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="n">norm</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">LOGIC_c</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>mat_eq_def_2_1</dep>
                <dep>mat_eq_def_2_2</dep>
                <dep>norm_pre_pos</dep>
                <dep>norm_pos</dep>
                <dep>norm_sep</dep>
                <dep>Amult</dep>
                <dep>mult_idL</dep>
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_xLT+(0..2))</assign>
                <assign>cholesky_PF2_sumcho</assign>
                <assign>compute_dt_nc</assign>
                <assign>cholesky_PF2_i2</assign>
                <assign>*(cholesky_PF2_D+(0..4))</assign>
                <assign>cholesky_PF2_sumLT</assign>
                <assign>*(cholesky_PF2_A+(0..4))</assign>
                <assign>cholesky_PF2_sumUT</assign>
                <assign>*(compute_dt_pre_nc+(0..1))</assign>
                <assign>*(cholesky_PF2_xUT+(0..2))</assign>
                <assign>cholesky_PF2_i1</assign>
                <assign>*(cholesky_PF2_L+(0..4))</assign>
                <assign>cholesky_PF2_i0</assign>
                <assign>*(cholesky_PF2_b+(0..2))</assign>
                <assign>*(cholesky_PF2_z+(0..2))</assign>
                <assign>pathfollowing_dt</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ requires ((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));
  @ ensures ((pathfollowing_dt)==((((0.1388888888888889))/(norm(LOGIC_A, LOGIC_b, LOGIC_c, MatVar(((double*)pathfollowing_X), (2), (1)))))));
  @ assigns *(cholesky_PF2_xLT+(0..2)), cholesky_PF2_sumcho, compute_dt_nc, cholesky_PF2_i2, *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumLT, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumUT, *(compute_dt_pre_nc+(0..1)), *(cholesky_PF2_xUT+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2)), pathfollowing_dt;
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ requires ((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));</span>
<span class="lineno">3 </span><span class="cm">  @ ensures ((pathfollowing_dt)==((((0.1388888888888889))/(norm(LOGIC_A, LOGIC_b, LOGIC_c, MatVar(((double*)pathfollowing_X), (2), (1)))))));</span>
<span class="lineno">4 </span><span class="cm">  @ assigns *(cholesky_PF2_xLT+(0..2)), cholesky_PF2_sumcho, compute_dt_nc, cholesky_PF2_i2, *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumLT, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumUT, *(compute_dt_pre_nc+(0..1)), *(cholesky_PF2_xUT+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2)), pathfollowing_dt;</span>
<span class="lineno">5 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void compute_dt()
{
    set_cholesky_PF2_A1();
    set_cholesky_PF2_b1();
    cholesky_PF2();
    //@assert (((MatVar(((double*)cholesky_PF2_xUT), (2), (1)))==(mat_mult(inv(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))), LOGIC_c))));
    set_compute_dt_pre_nc();
    //@assert (((MatVar(((double*)compute_dt_pre_nc), (1), (1)))==(mat_mult(transpose(LOGIC_c), mat_mult(inv(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))), LOGIC_c)))));
    set_nc();
    //@assert (((compute_dt_nc)==(norm(LOGIC_A, LOGIC_b, LOGIC_c, MatVar(((double*)pathfollowing_X), (2), (1))))));
    pathfollowing_dt = (((0.1388888888888889))/(compute_dt_nc));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">compute_dt</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">set_cholesky_PF2_A1</span><span class="p">();</span>
<span class="lineno"> 4 </span>    <span class="n">set_cholesky_PF2_b1</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="n">cholesky_PF2</span><span class="p">();</span>
<span class="lineno"> 6 </span>    <span class="c1">//@assert (((MatVar(((double*)cholesky_PF2_xUT), (2), (1)))==(mat_mult(inv(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))), LOGIC_c))));</span>
<span class="lineno"> 7 </span>    <span class="n">set_compute_dt_pre_nc</span><span class="p">();</span>
<span class="lineno"> 8 </span>    <span class="c1">//@assert (((MatVar(((double*)compute_dt_pre_nc), (1), (1)))==(mat_mult(transpose(LOGIC_c), mat_mult(inv(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))), LOGIC_c)))));</span>
<span class="lineno"> 9 </span>    <span class="n">set_nc</span><span class="p">();</span>
<span class="lineno">10 </span>    <span class="c1">//@assert (((compute_dt_nc)==(norm(LOGIC_A, LOGIC_b, LOGIC_c, MatVar(((double*)pathfollowing_X), (2), (1))))));</span>
<span class="lineno">11 </span>    <span class="n">pathfollowing_dt</span> <span class="o">=</span> <span class="p">(((</span><span class="mf">0.1388888888888889</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="n">compute_dt_nc</span><span class="p">));</span>
<span class="lineno">12 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_A1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)cholesky_PF2_A), (2), (2)))==(\old(MatVar(((double*)compute_pre_hess), (2), (2)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_A</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>mat_eq_def_2_2</dep>
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_A+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)cholesky_PF2_A), (2), (2)))==(\old(MatVar(((double*)compute_pre_hess), (2), (2)))));
  @ assigns *(cholesky_PF2_A+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)cholesky_PF2_A), (2), (2)))==(\old(MatVar(((double*)compute_pre_hess), (2), (2)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_A+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_A1()
{
    set_cholesky_PF2_A1_sub_0();
    set_cholesky_PF2_A1_sub_1();
    set_cholesky_PF2_A1_sub_2();
    set_cholesky_PF2_A1_sub_3();
    //@assert (((getM(MatVar(((double*)cholesky_PF2_A), (2), (2))))==((2))));
    //@assert (((getN(MatVar(((double*)cholesky_PF2_A), (2), (2))))==((2))));
    //@assert (((getM(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre)))==((2))));
    //@assert (((getN(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre)))==((2))));
    //@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (1)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (1), (1)))));
    //@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (0)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (1), (0)))));
    //@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (1)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (0), (1)))));
    //@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (0)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (0), (0)))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_A1</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">set_cholesky_PF2_A1_sub_0</span><span class="p">();</span>
<span class="lineno"> 4 </span>    <span class="n">set_cholesky_PF2_A1_sub_1</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="n">set_cholesky_PF2_A1_sub_2</span><span class="p">();</span>
<span class="lineno"> 6 </span>    <span class="n">set_cholesky_PF2_A1_sub_3</span><span class="p">();</span>
<span class="lineno"> 7 </span>    <span class="c1">//@assert (((getM(MatVar(((double*)cholesky_PF2_A), (2), (2))))==((2))));</span>
<span class="lineno"> 8 </span>    <span class="c1">//@assert (((getN(MatVar(((double*)cholesky_PF2_A), (2), (2))))==((2))));</span>
<span class="lineno"> 9 </span>    <span class="c1">//@assert (((getM(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre)))==((2))));</span>
<span class="lineno">10 </span>    <span class="c1">//@assert (((getN(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre)))==((2))));</span>
<span class="lineno">11 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (1)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (1), (1)))));</span>
<span class="lineno">12 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (0)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (1), (0)))));</span>
<span class="lineno">13 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (1)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (0), (1)))));</span>
<span class="lineno">14 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (0)))==(mat_get(\at(MatVar(((double*)compute_pre_hess), (2), (2)), Pre), (0), (0)))));</span>
<span class="lineno">15 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_A1_sub_0">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (0)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_A</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_A+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (0)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (0)))));
  @ assigns *(cholesky_PF2_A+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (0)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_A+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_A1_sub_0()
{
    cholesky_PF2_A[(0)] = compute_pre_hess[(0)];
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_A1_sub_0</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">cholesky_PF2_A</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">0</span><span class="p">)];</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_A1_sub_1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (1)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_A</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_A+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (1)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (1)))));
  @ assigns *(cholesky_PF2_A+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (0), (1)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (0), (1)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_A+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_A1_sub_1()
{
    cholesky_PF2_A[(2)] = compute_pre_hess[(2)];
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_A1_sub_1</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">cholesky_PF2_A</span><span class="p">[(</span><span class="mi">2</span><span class="p">)]</span> <span class="o">=</span> <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">2</span><span class="p">)];</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_A1_sub_2">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (0)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_A</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_A+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (0)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (0)))));
  @ assigns *(cholesky_PF2_A+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (0)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_A+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_A1_sub_2()
{
    cholesky_PF2_A[(1)] = compute_pre_hess[(1)];
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_A1_sub_2</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">cholesky_PF2_A</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">1</span><span class="p">)];</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_A1_sub_3">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (1)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_A</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_A+(0..4))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (1)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (1)))));
  @ assigns *(cholesky_PF2_A+(0..4));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_A), (2), (2)), (1), (1)))==(\old(mat_get(MatVar(((double*)compute_pre_hess), (2), (2)), (1), (1)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_A+(0..4));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_A1_sub_3()
{
    cholesky_PF2_A[(3)] = compute_pre_hess[(3)];
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_A1_sub_3</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">cholesky_PF2_A</span><span class="p">[(</span><span class="mi">3</span><span class="p">)]</span> <span class="o">=</span> <span class="n">compute_pre_hess</span><span class="p">[(</span><span class="mi">3</span><span class="p">)];</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_b1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)cholesky_PF2_b), (2), (1)))==(\old(LOGIC_c)))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_b</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">LOGIC_c</span><span class="p">)))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>mat_eq_def_2_1</dep>
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_b+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)cholesky_PF2_b), (2), (1)))==(\old(LOGIC_c)));
  @ assigns *(cholesky_PF2_b+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)cholesky_PF2_b), (2), (1)))==(\old(LOGIC_c)));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_b+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_b1()
{
    set_cholesky_PF2_b1_sub_0();
    set_cholesky_PF2_b1_sub_1();
    //@assert (((getM(MatVar(((double*)cholesky_PF2_b), (2), (1))))==((2))));
    //@assert (((getN(MatVar(((double*)cholesky_PF2_b), (2), (1))))==((1))));
    //@assert (((getM(\at(LOGIC_c, Pre)))==((2))));
    //@assert (((getN(\at(LOGIC_c, Pre)))==((1))));
    //@assert (((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (1), (0)))==(mat_get(\at(LOGIC_c, Pre), (1), (0)))));
    //@assert (((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (0), (0)))==(mat_get(\at(LOGIC_c, Pre), (0), (0)))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_b1</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">set_cholesky_PF2_b1_sub_0</span><span class="p">();</span>
<span class="lineno"> 4 </span>    <span class="n">set_cholesky_PF2_b1_sub_1</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="c1">//@assert (((getM(MatVar(((double*)cholesky_PF2_b), (2), (1))))==((2))));</span>
<span class="lineno"> 6 </span>    <span class="c1">//@assert (((getN(MatVar(((double*)cholesky_PF2_b), (2), (1))))==((1))));</span>
<span class="lineno"> 7 </span>    <span class="c1">//@assert (((getM(\at(LOGIC_c, Pre)))==((2))));</span>
<span class="lineno"> 8 </span>    <span class="c1">//@assert (((getN(\at(LOGIC_c, Pre)))==((1))));</span>
<span class="lineno"> 9 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (1), (0)))==(mat_get(\at(LOGIC_c, Pre), (1), (0)))));</span>
<span class="lineno">10 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (0), (0)))==(mat_get(\at(LOGIC_c, Pre), (0), (0)))));</span>
<span class="lineno">11 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_b1_sub_0">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (0), (0)))==(\old(mat_get(LOGIC_c, (0), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_b</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">LOGIC_c</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_b+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (0), (0)))==(\old(mat_get(LOGIC_c, (0), (0)))));
  @ assigns *(cholesky_PF2_b+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (0), (0)))==(\old(mat_get(LOGIC_c, (0), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_b+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_b1_sub_0()
{
    cholesky_PF2_b[(0)] = (-1.0);
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_b1_sub_0</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">cholesky_PF2_b</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">);</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_cholesky_PF2_b1_sub_1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (1), (0)))==(\old(mat_get(LOGIC_c, (1), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_b</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">LOGIC_c</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_b+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (1), (0)))==(\old(mat_get(LOGIC_c, (1), (0)))));
  @ assigns *(cholesky_PF2_b+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)cholesky_PF2_b), (2), (1)), (1), (0)))==(\old(mat_get(LOGIC_c, (1), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(cholesky_PF2_b+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_cholesky_PF2_b1_sub_1()
{
    cholesky_PF2_b[(1)] = (4.0);
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_cholesky_PF2_b1_sub_1</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">cholesky_PF2_b</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(</span><span class="mf">4.0</span><span class="p">);</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_dt_pre_nc">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)compute_dt_pre_nc), (1), (1)))==(\old(mat_mult(transpose(LOGIC_c), MatVar(((double*)cholesky_PF2_xUT), (2), (1))))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_dt_pre_nc</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_mult</span><span class="p">(</span><span class="n">transpose</span><span class="p">(</span><span class="n">LOGIC_c</span><span class="p">),</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_xUT</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>mat_eq_def_1_1</dep>
            </hints>
            <assigns >
                <assign>*(compute_dt_pre_nc+(0..1))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)compute_dt_pre_nc), (1), (1)))==(\old(mat_mult(transpose(LOGIC_c), MatVar(((double*)cholesky_PF2_xUT), (2), (1))))));
  @ assigns *(compute_dt_pre_nc+(0..1));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)compute_dt_pre_nc), (1), (1)))==(\old(mat_mult(transpose(LOGIC_c), MatVar(((double*)cholesky_PF2_xUT), (2), (1))))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_dt_pre_nc+(0..1));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_dt_pre_nc()
{
    set_compute_dt_pre_nc_sub_0();
    //@assert (((getM(MatVar(((double*)compute_dt_pre_nc), (1), (1))))==((1))));
    //@assert (((getN(MatVar(((double*)compute_dt_pre_nc), (1), (1))))==((1))));
    //@assert (((getM(\at(mat_mult(transpose(LOGIC_c), MatVar(((double*)cholesky_PF2_xUT), (2), (1))), Pre)))==((1))));
    //@assert (((getN(\at(mat_mult(transpose(LOGIC_c), MatVar(((double*)cholesky_PF2_xUT), (2), (1))), Pre)))==((1))));
    //@assert (((mat_get(MatVar(((double*)compute_dt_pre_nc), (1), (1)), (0), (0)))==(mat_get(\at(mat_mult(transpose(LOGIC_c), MatVar(((double*)cholesky_PF2_xUT), (2), (1))), Pre), (0), (0)))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_dt_pre_nc</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">set_compute_dt_pre_nc_sub_0</span><span class="p">();</span>
<span class="lineno">4 </span>    <span class="c1">//@assert (((getM(MatVar(((double*)compute_dt_pre_nc), (1), (1))))==((1))));</span>
<span class="lineno">5 </span>    <span class="c1">//@assert (((getN(MatVar(((double*)compute_dt_pre_nc), (1), (1))))==((1))));</span>
<span class="lineno">6 </span>    <span class="c1">//@assert (((getM(\at(mat_mult(transpose(LOGIC_c), MatVar(((double*)cholesky_PF2_xUT), (2), (1))), Pre)))==((1))));</span>
<span class="lineno">7 </span>    <span class="c1">//@assert (((getN(\at(mat_mult(transpose(LOGIC_c), MatVar(((double*)cholesky_PF2_xUT), (2), (1))), Pre)))==((1))));</span>
<span class="lineno">8 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)compute_dt_pre_nc), (1), (1)), (0), (0)))==(mat_get(\at(mat_mult(transpose(LOGIC_c), MatVar(((double*)cholesky_PF2_xUT), (2), (1))), Pre), (0), (0)))));</span>
<span class="lineno">9 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_compute_dt_pre_nc_sub_0">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_dt_pre_nc), (1), (1)), (0), (0)))==(\old(mat_get(mat_mult(transpose(LOGIC_c), MatVar(((double*)cholesky_PF2_xUT), (2), (1))), (0), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_dt_pre_nc</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">mat_mult</span><span class="p">(</span><span class="n">transpose</span><span class="p">(</span><span class="n">LOGIC_c</span><span class="p">),</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">cholesky_PF2_xUT</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">))),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(compute_dt_pre_nc+(0..1))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)compute_dt_pre_nc), (1), (1)), (0), (0)))==(\old(mat_get(mat_mult(transpose(LOGIC_c), MatVar(((double*)cholesky_PF2_xUT), (2), (1))), (0), (0)))));
  @ assigns *(compute_dt_pre_nc+(0..1));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)compute_dt_pre_nc), (1), (1)), (0), (0)))==(\old(mat_get(mat_mult(transpose(LOGIC_c), MatVar(((double*)cholesky_PF2_xUT), (2), (1))), (0), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(compute_dt_pre_nc+(0..1));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_compute_dt_pre_nc_sub_0()
{
    compute_dt_pre_nc[(0)] = (((((-1.0))*(cholesky_PF2_xUT[(0)])))+((((4.0))*(cholesky_PF2_xUT[(1)]))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_compute_dt_pre_nc_sub_0</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_dt_pre_nc</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(((((</span><span class="o">-</span><span class="mf">1.0</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="n">cholesky_PF2_xUT</span><span class="p">[(</span><span class="mi">0</span><span class="p">)])))</span><span class="o">+</span><span class="p">((((</span><span class="mf">4.0</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="n">cholesky_PF2_xUT</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]))));</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_nc">
        <contract >
            <require >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)compute_dt_pre_nc), (1), (1)), (0), (0)))>=((0.0)))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_dt_pre_nc</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">&gt;=</span><span class="p">((</span><span class="mf">0.0</span><span class="p">)))</span>
</pre></div>

                    </pp>
                </code>
            </require>
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((compute_dt_nc)==(\sqrt(mat_get(MatVar(((double*)compute_dt_pre_nc), (1), (1)), (0), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">compute_dt_nc</span><span class="p">)</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">sqrt</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_dt_pre_nc</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>compute_dt_nc</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ requires ((mat_get(MatVar(((double*)compute_dt_pre_nc), (1), (1)), (0), (0)))>=((0.0)));
  @ ensures ((compute_dt_nc)==(\sqrt(mat_get(MatVar(((double*)compute_dt_pre_nc), (1), (1)), (0), (0)))));
  @ assigns compute_dt_nc;
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ requires ((mat_get(MatVar(((double*)compute_dt_pre_nc), (1), (1)), (0), (0)))&gt;=((0.0)));</span>
<span class="lineno">3 </span><span class="cm">  @ ensures ((compute_dt_nc)==(\sqrt(mat_get(MatVar(((double*)compute_dt_pre_nc), (1), (1)), (0), (0)))));</span>
<span class="lineno">4 </span><span class="cm">  @ assigns compute_dt_nc;</span>
<span class="lineno">5 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_nc()
{
    compute_dt_nc = mysqrt(compute_dt_pre_nc[(0)]);
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_nc</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_dt_nc</span> <span class="o">=</span> <span class="n">mysqrt</span><span class="p">(</span><span class="n">compute_dt_pre_nc</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]);</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="update_t">
        <contract >
            <require >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">compute_pre_hess</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="n">hess</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </require>
            <require >
                <code>
                    <verbatim>
                        <![CDATA[acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.1111111111111111))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="n">acc</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">LOGIC_c</span><span class="p">,</span> <span class="n">pathfollowing_t</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mf">0.1111111111111111</span><span class="p">))</span>
</pre></div>

                    </pp>
                </code>
            </require>
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.25))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="n">acc</span><span class="p">(</span><span class="n">LOGIC_A</span><span class="p">,</span> <span class="n">LOGIC_b</span><span class="p">,</span> <span class="n">LOGIC_c</span><span class="p">,</span> <span class="n">pathfollowing_t</span><span class="p">,</span> <span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mf">0.25</span><span class="p">))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((pathfollowing_t)>(((\old(pathfollowing_t))*((1.125)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">pathfollowing_t</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(((</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">pathfollowing_t</span><span class="p">))</span><span class="o">*</span><span class="p">((</span><span class="mf">1.125</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>lemma_4_2_1</dep>
                <dep>update_t_ensures1</dep>
                <dep>update_t_ensures2</dep>
            </hints>
            <assigns >
                <assign>*(cholesky_PF2_xLT+(0..2))</assign>
                <assign>cholesky_PF2_sumcho</assign>
                <assign>compute_dt_nc</assign>
                <assign>cholesky_PF2_i2</assign>
                <assign>*(cholesky_PF2_D+(0..4))</assign>
                <assign>cholesky_PF2_sumLT</assign>
                <assign>*(cholesky_PF2_A+(0..4))</assign>
                <assign>cholesky_PF2_sumUT</assign>
                <assign>*(compute_dt_pre_nc+(0..1))</assign>
                <assign>*(cholesky_PF2_xUT+(0..2))</assign>
                <assign>pathfollowing_t</assign>
                <assign>cholesky_PF2_i1</assign>
                <assign>*(cholesky_PF2_L+(0..4))</assign>
                <assign>cholesky_PF2_i0</assign>
                <assign>*(cholesky_PF2_b+(0..2))</assign>
                <assign>*(cholesky_PF2_z+(0..2))</assign>
                <assign>pathfollowing_dt</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ requires ((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));
  @ requires acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.1111111111111111));
  @ ensures acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.25));
  @ ensures ((pathfollowing_t)>(((\old(pathfollowing_t))*((1.125)))));
  @ assigns *(cholesky_PF2_xLT+(0..2)), cholesky_PF2_sumcho, compute_dt_nc, cholesky_PF2_i2, *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumLT, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumUT, *(compute_dt_pre_nc+(0..1)), *(cholesky_PF2_xUT+(0..2)), pathfollowing_t, cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2)), pathfollowing_dt;
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ requires ((MatVar(((double*)compute_pre_hess), (2), (2)))==(hess(LOGIC_A, LOGIC_b, MatVar(((double*)pathfollowing_X), (2), (1)))));</span>
<span class="lineno">3 </span><span class="cm">  @ requires acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.1111111111111111));</span>
<span class="lineno">4 </span><span class="cm">  @ ensures acc(LOGIC_A, LOGIC_b, LOGIC_c, pathfollowing_t, MatVar(((double*)pathfollowing_X), (2), (1)), (0.25));</span>
<span class="lineno">5 </span><span class="cm">  @ ensures ((pathfollowing_t)&gt;(((\old(pathfollowing_t))*((1.125)))));</span>
<span class="lineno">6 </span><span class="cm">  @ assigns *(cholesky_PF2_xLT+(0..2)), cholesky_PF2_sumcho, compute_dt_nc, cholesky_PF2_i2, *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumLT, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumUT, *(compute_dt_pre_nc+(0..1)), *(cholesky_PF2_xUT+(0..2)), pathfollowing_t, cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2)), pathfollowing_dt;</span>
<span class="lineno">7 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void update_t()
{
    compute_dt();
    pathfollowing_t = ((pathfollowing_t)+(pathfollowing_dt));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">update_t</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">compute_dt</span><span class="p">();</span>
<span class="lineno">4 </span>    <span class="n">pathfollowing_t</span> <span class="o">=</span> <span class="p">((</span><span class="n">pathfollowing_t</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">pathfollowing_dt</span><span class="p">));</span>
<span class="lineno">5 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="compute">
        <contract >
            <hints >
                <dep>PF2_analytic_center</dep>
            </hints>
            <assigns >
                <assign>compute_dt_nc</assign>
                <assign>*(cholesky_PF2_A+(0..4))</assign>
                <assign>cholesky_PF2_sumcho</assign>
                <assign>*(pathfollowing_X+(0..2))</assign>
                <assign>*(cholesky_PF2_D+(0..4))</assign>
                <assign>cholesky_PF2_sumUT</assign>
                <assign>*(compute_dt_pre_nc+(0..1))</assign>
                <assign>pathfollowing_t</assign>
                <assign>*(compute_pre_grad+(0..2))</assign>
                <assign>cholesky_PF2_i1</assign>
                <assign>*(cholesky_PF2_L+(0..4))</assign>
                <assign>*(compute_pre_hess+(0..4))</assign>
                <assign>cholesky_PF2_i2</assign>
                <assign>*(cholesky_PF2_xUT+(0..2))</assign>
                <assign>pathfollowing_dt</assign>
                <assign>*(pathfollowing_dx+(0..2))</assign>
                <assign>*(cholesky_PF2_xLT+(0..2))</assign>
                <assign>pathfollowing_i0</assign>
                <assign>*(compute_pre_vals+(0..5))</assign>
                <assign>cholesky_PF2_sumLT</assign>
                <assign>cholesky_PF2_i0</assign>
                <assign>*(cholesky_PF2_b+(0..2))</assign>
                <assign>*(cholesky_PF2_z+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ assigns compute_dt_nc, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumcho, *(pathfollowing_X+(0..2)), *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumUT, *(compute_dt_pre_nc+(0..1)), pathfollowing_t, *(compute_pre_grad+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), *(compute_pre_hess+(0..4)), cholesky_PF2_i2, *(cholesky_PF2_xUT+(0..2)), pathfollowing_dt, *(pathfollowing_dx+(0..2)), *(cholesky_PF2_xLT+(0..2)), pathfollowing_i0, *(compute_pre_vals+(0..5)), cholesky_PF2_sumLT, cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ assigns compute_dt_nc, *(cholesky_PF2_A+(0..4)), cholesky_PF2_sumcho, *(pathfollowing_X+(0..2)), *(cholesky_PF2_D+(0..4)), cholesky_PF2_sumUT, *(compute_dt_pre_nc+(0..1)), pathfollowing_t, *(compute_pre_grad+(0..2)), cholesky_PF2_i1, *(cholesky_PF2_L+(0..4)), *(compute_pre_hess+(0..4)), cholesky_PF2_i2, *(cholesky_PF2_xUT+(0..2)), pathfollowing_dt, *(pathfollowing_dx+(0..2)), *(cholesky_PF2_xLT+(0..2)), pathfollowing_i0, *(compute_pre_vals+(0..5)), cholesky_PF2_sumLT, cholesky_PF2_i0, *(cholesky_PF2_b+(0..2)), *(cholesky_PF2_z+(0..2));</span>
<span class="lineno">3 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void compute()
{
    set_pathfollowing_X1();
    pathfollowing();
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">compute</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">set_pathfollowing_X1</span><span class="p">();</span>
<span class="lineno">4 </span>    <span class="n">pathfollowing</span><span class="p">();</span>
<span class="lineno">5 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_pathfollowing_X1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((MatVar(((double*)pathfollowing_X), (2), (1)))==(\old(LOGIC_CA)))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">LOGIC_CA</span><span class="p">)))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
                <dep>mat_eq_def_2_1</dep>
            </hints>
            <assigns >
                <assign>*(pathfollowing_X+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((MatVar(((double*)pathfollowing_X), (2), (1)))==(\old(LOGIC_CA)));
  @ assigns *(pathfollowing_X+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((MatVar(((double*)pathfollowing_X), (2), (1)))==(\old(LOGIC_CA)));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(pathfollowing_X+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_pathfollowing_X1()
{
    set_pathfollowing_X1_sub_0();
    set_pathfollowing_X1_sub_1();
    //@assert (((getM(MatVar(((double*)pathfollowing_X), (2), (1))))==((2))));
    //@assert (((getN(MatVar(((double*)pathfollowing_X), (2), (1))))==((1))));
    //@assert (((getM(\at(LOGIC_CA, Pre)))==((2))));
    //@assert (((getN(\at(LOGIC_CA, Pre)))==((1))));
    //@assert (((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (1), (0)))==(mat_get(\at(LOGIC_CA, Pre), (1), (0)))));
    //@assert (((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (0), (0)))==(mat_get(\at(LOGIC_CA, Pre), (0), (0)))));
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno"> 1 </span><span class="kt">void</span> <span class="nf">set_pathfollowing_X1</span><span class="p">()</span>
<span class="lineno"> 2 </span><span class="p">{</span>
<span class="lineno"> 3 </span>    <span class="n">set_pathfollowing_X1_sub_0</span><span class="p">();</span>
<span class="lineno"> 4 </span>    <span class="n">set_pathfollowing_X1_sub_1</span><span class="p">();</span>
<span class="lineno"> 5 </span>    <span class="c1">//@assert (((getM(MatVar(((double*)pathfollowing_X), (2), (1))))==((2))));</span>
<span class="lineno"> 6 </span>    <span class="c1">//@assert (((getN(MatVar(((double*)pathfollowing_X), (2), (1))))==((1))));</span>
<span class="lineno"> 7 </span>    <span class="c1">//@assert (((getM(\at(LOGIC_CA, Pre)))==((2))));</span>
<span class="lineno"> 8 </span>    <span class="c1">//@assert (((getN(\at(LOGIC_CA, Pre)))==((1))));</span>
<span class="lineno"> 9 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (1), (0)))==(mat_get(\at(LOGIC_CA, Pre), (1), (0)))));</span>
<span class="lineno">10 </span>    <span class="c1">//@assert (((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (0), (0)))==(mat_get(\at(LOGIC_CA, Pre), (0), (0)))));</span>
<span class="lineno">11 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_pathfollowing_X1_sub_0">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (0), (0)))==(\old(mat_get(LOGIC_CA, (0), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">LOGIC_CA</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(pathfollowing_X+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (0), (0)))==(\old(mat_get(LOGIC_CA, (0), (0)))));
  @ assigns *(pathfollowing_X+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (0), (0)))==(\old(mat_get(LOGIC_CA, (0), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(pathfollowing_X+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_pathfollowing_X1_sub_0()
{
    pathfollowing_X[(0)] = (0.060718593156416256);
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_pathfollowing_X1_sub_0</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.060718593156416256</span><span class="p">);</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
    <function name="set_pathfollowing_X1_sub_1">
        <contract >
            <ensure >
                <code>
                    <verbatim>
                        <![CDATA[((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (1), (0)))==(\old(mat_get(LOGIC_CA, (1), (0)))))]]>
                    </verbatim>
                    <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="p">((</span><span class="n">mat_get</span><span class="p">(</span><span class="n">MatVar</span><span class="p">(((</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">pathfollowing_X</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">==</span><span class="p">(</span><span class="err">\</span><span class="n">old</span><span class="p">(</span><span class="n">mat_get</span><span class="p">(</span><span class="n">LOGIC_CA</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">)))))</span>
</pre></div>

                    </pp>
                </code>
            </ensure>
            <hints >
            </hints>
            <assigns >
                <assign>*(pathfollowing_X+(0..2))</assign>
            </assigns>
            <code>
                <verbatim>
                    <![CDATA[
/*@
  @ ensures ((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (1), (0)))==(\old(mat_get(LOGIC_CA, (1), (0)))));
  @ assigns *(pathfollowing_X+(0..2));
  @ */]]>
                </verbatim>
                <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="cm">/*@</span>
<span class="lineno">2 </span><span class="cm">  @ ensures ((mat_get(MatVar(((double*)pathfollowing_X), (2), (1)), (1), (0)))==(\old(mat_get(LOGIC_CA, (1), (0)))));</span>
<span class="lineno">3 </span><span class="cm">  @ assigns *(pathfollowing_X+(0..2));</span>
<span class="lineno">4 </span><span class="cm">  @ */</span>
</pre></div>

                </pp>
            </code>
        </contract>
        <code>
            <verbatim>
                <![CDATA[
void set_pathfollowing_X1_sub_1()
{
    pathfollowing_X[(1)] = (0.3095989773973741);
}]]>
            </verbatim>
            <pp xmlns='http://www.w3.org/1999/xhtml'><div class="highlight"><pre><span></span><span class="lineno">1 </span><span class="kt">void</span> <span class="nf">set_pathfollowing_X1_sub_1</span><span class="p">()</span>
<span class="lineno">2 </span><span class="p">{</span>
<span class="lineno">3 </span>    <span class="n">pathfollowing_X</span><span class="p">[(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.3095989773973741</span><span class="p">);</span>
<span class="lineno">4 </span><span class="p">}</span>
</pre></div>

            </pp>
        </code>
    </function>
</report>